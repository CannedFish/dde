// Generated by CoffeeScript 1.3.3
(function() {
  var DesktopApplet, DesktopEntry, Folder, Item, Module, NormalFile, Recordable, Widget, clear_occupy, copy_file_to_desktop, create_item, detect_occupy, draw_grid, echo, i_height, i_width, init_item_pos, load_occupy_table, move_to_position, pixel_to_position, s_height, s_width, set_occupy, sort_item,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Storage.prototype.setObject = function(key, value) {
    return this.setItem(key, JSON.stringify(value));
  };

  Storage.prototype.getObject = function(key) {
    return JSON.parse(this.getItem(key));
  };

  echo = function(log) {
    return console.log(log);
  };

  Module = (function() {
    var moduleKeywords;

    function Module() {}

    moduleKeywords = ['extended', 'included'];

    Module.extended = function(obj) {
      var key, value, _ref;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.included = function(obj, parms) {
      var key, value, _ref, _ref1;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return (_ref1 = obj.__init__) != null ? _ref1.call(this, parms) : void 0;
    };

    return Module;

  })();

  Recordable = {
    db_tabls: [],
    __init__: function(parms) {
      this.prototype.get_fields = parms;
      return this.prototype.create_table();
    },
    table: function() {
      return "__d_" + this.constructor.name + "__";
    },
    fields: function() {
      return this.get_fields.join();
    },
    fields_n: function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 1, _ref = this.get_fields.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        _results.push('?');
      }
      return _results;
    },
    save: function() {
      var fn, i, values,
        _this = this;
      values = (function() {
        var _i, _len, _ref, _results;
        _ref = this.get_fields;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push(this["get_" + i]());
        }
        return _results;
      }).call(this);
      fn = this.fields_n();
      return db_conn.transaction(function(tx) {
        return tx.executeSql("replace into " + (_this.table()) + " (" + (_this.fields()) + ") values (" + fn + ");", values, function(result) {}, function(tx, error) {
          return console.log(error);
        });
      });
    },
    create_table: function() {
      var fs;
      fs = this.fields().split(',').slice(1).join(' Int, ') + " Int";
      return Recordable.db_tabls.push("CREATE TABLE " + (this.table()) + " (id REAL UNIQUE, " + fs + ");");
    },
    load: function() {
      var _this = this;
      return db_conn.transaction(function(tx) {
        return tx.executeSql("select " + (_this.fields()) + " from " + (_this.table()) + " where id = ?", [_this.id], function(tx, r) {
          var field, p, _i, _len, _ref, _results;
          p = r.rows.item(0);
          _ref = _this.get_fields;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            _results.push(_this["set_" + field](p[field]));
          }
          return _results;
        }, function(tx, error) {});
      });
    }
  };

  s_width = 1280;

  s_height = 746;

  i_width = 80;

  i_height = 80;

  init_item_pos = function() {
    var o_table;
    return o_table = load_occupy_table();
  };

  load_occupy_table = function() {
    var i, o_table, _i, _ref;
    o_table = localStorage.getObject("occupy_table");
    if (!(o_table != null)) {
      o_table = new Array();
      for (i = _i = 0, _ref = Math.floor(s_width / i_width); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        o_table[i] = new Array(Math.floor(s_height / i_height));
      }
    }
    localStorage.setObject("occupy_table", o_table);
    return o_table;
  };

  clear_occupy = function(id) {
    var col, i, j, o_table, row, _i, _j, _len, _len1;
    o_table = load_occupy_table();
    for (i = _i = 0, _len = o_table.length; _i < _len; i = ++_i) {
      row = o_table[i];
      for (j = _j = 0, _len1 = row.length; _j < _len1; j = ++_j) {
        col = row[j];
        if (o_table[i][j] === id) {
          o_table[i][j] = null;
        }
      }
    }
    return localStorage.setObject("occupy_table", o_table);
  };

  set_occupy = function(id, x, y, w, h) {
    var i, j, o_table, _i, _j, _ref, _ref1;
    o_table = load_occupy_table();
    for (i = _i = 0, _ref = w - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      for (j = _j = 0, _ref1 = h - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        o_table[x + i][y + j] = id;
      }
    }
    return localStorage.setObject("occupy_table", o_table);
  };

  detect_occupy = function(x, y, w, h) {
    var i, j, o_table, _i, _j, _ref, _ref1;
    o_table = load_occupy_table();
    for (i = _i = 0, _ref = w - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      for (j = _j = 0, _ref1 = h - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        if (o_table[x + i][y + j] != null) {
          return false;
        }
      }
    }
    return true;
  };

  pixel_to_position = function(x, y) {
    var p_x, p_y;
    p_x = Math.floor(x / i_width);
    p_y = Math.floor(y / i_height);
    return [p_x, p_y];
  };

  move_to_position = function(widget, x, y) {
    if (detect_occupy(x, y, 1, 1)) {
      widget.style.position = "fixed";
      widget.style.left = x * i_width;
      widget.style.top = y * i_height;
      clear_occupy(widget.id);
      return set_occupy(widget.id, x, y, 1, 1);
    }
  };

  draw_grid = function(ctx) {
    var cols, i, j, rows, _i, _results;
    ctx.fillStyle = 'rgba(0, 100, 0, 0.1)';
    cols = window.screen.availWidth / (i_width - 10);
    rows = window.screen.availHeight / (i_height - 10);
    _results = [];
    for (i = _i = 0; 0 <= cols ? _i <= cols : _i >= cols; i = 0 <= cols ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= rows ? _j <= rows : _j >= rows; j = 0 <= rows ? ++_j : --_j) {
          _results1.push(ctx.fillRect(i * i_width, j * i_height, i_width - 5, i_height - 5));
        }
        return _results1;
      })());
    }
    return _results;
  };

  sort_item = function() {
    var i, item, x, y, _i, _len, _ref, _results;
    _ref = $(".item");
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      item = _ref[i];
      x = Math.floor(i / Math.floor(s_height / i_height));
      y = Math.ceil(i % Math.floor(s_height / i_height));
      echo("sort :(" + i + ", " + x + ", " + y + ")");
      _results.push(move_to_position(item, x, y));
    }
    return _results;
  };

  copy_file_to_desktop = function(path) {
    Desktop.Core.run_command("cp " + path + " /home/snyh/Desktop/");
    return location.reload();
  };

  $("body").drop({
    "drop": function(evt) {
      var file, _i, _len, _ref, _results;
      _ref = evt.originalEvent.dataTransfer.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        echo("find file " + file.name);
        _results.push(copy_file_to_desktop(file.path));
      }
      return _results;
    },
    "over": function(evt) {
      evt.dataTransfer.dropEffect = "move";
      return evt.preventDefault();
    },
    "enter": function(evt) {},
    "leave": function(evt) {}
  });

  $.contextMenu({
    selector: ".item",
    callback: function(key, opt) {
      switch (key) {
        case "reload":
          return location.reload();
        case "sort":
          return sort_item();
        case "dele":
          return echo(opt);
        case "preview":
          return echo("preview");
      }
    },
    items: {
      "preview": {
        name: "Preview"
      },
      "dele": {
        name: "Delete"
      },
      "sort": {
        name: "Sort Item"
      },
      "sepl": "--------------",
      "reload": {
        name: "Reload"
      }
    }
  });

  Widget = (function(_super) {

    __extends(Widget, _super);

    function Widget() {
      return Widget.__super__.constructor.apply(this, arguments);
    }

    Widget.prototype._$ = function() {
      return $("#" + this.id);
    };

    Widget.prototype.get_id = function() {
      return this.id;
    };

    Widget.prototype.set_id = function(id) {
      return this.id = id;
    };

    Widget.prototype.get_x = function() {
      return this.get_position()[0];
    };

    Widget.prototype.set_x = function(x) {
      return this.set_position(x, -1);
    };

    Widget.prototype.get_y = function() {
      return this.get_position()[1];
    };

    Widget.prototype.set_y = function(y) {
      return this.set_position(-1, y);
    };

    Widget.prototype.get_width = function() {
      return this._$().outerWidth();
    };

    Widget.prototype.get_height = function() {
      return this._$().outerHeight();
    };

    Widget.prototype.get_position = function() {
      var node;
      node = this._$()[0];
      return pixel_to_position(node.style.left.replace("px", ""), node.style.top.replace("px", ""));
    };

    Widget.prototype.set_position = function(x, y) {
      var node;
      if (x === -1) {
        x = this.get_x();
      }
      if (y === -1) {
        y = this.get_y();
      }
      node = this._$()[0];
      return move_to_position(node, x, y);
    };

    return Widget;

  })(Module);

  Item = (function(_super) {

    __extends(Item, _super);

    function Item(name, icon, exec, path) {
      this.name = name;
      this.icon = icon;
      this.exec = exec;
      this.path = path;
      this.id = Desktop.Core.gen_id(this.path);
      this.itemTemp = "temp_item";
      this.itemContainer = "itemContainer";
      init_item_pos(this.id);
    }

    Item.prototype.render = function() {
      var item;
      item = $("#" + this.itemTemp).render({
        "class": "item",
        "id": this.id,
        "name": this.name,
        "icon": this.icon,
        "exec": this.exec,
        "path": this.path
      });
      $("#" + this.itemContainer).append(item);
      return this._$().dblclick(function() {
        return Desktop.Core.run_command($(this)[0].getAttribute('exec'));
      });
    };

    return Item;

  })(Widget);

  DesktopEntry = (function(_super) {

    __extends(DesktopEntry, _super);

    function DesktopEntry() {
      return DesktopEntry.__super__.constructor.apply(this, arguments);
    }

    DesktopEntry.prototype.render = function() {
      var _this = this;
      DesktopEntry.__super__.render.apply(this, arguments).render();
      return this._$().drag({
        "start": function(evt) {
          evt.dataTransfer.setData("text/uri-list", "file://" + _this.path);
          evt.dataTransfer.effectAllowed = "move";
          return evt.dataTransfer.dropEffect = "move";
        },
        "end": function(evt) {
          var node, pos;
          if (evt.dataTransfer.dropEffect === "move") {
            evt.preventDefault();
            node = evt.originalEvent.target;
            pos = pixel_to_position(evt.originalEvent.x, evt.originalEvent.y);
            return move_to_position(node, pos[0], pos[1]);
          } else if (evt.dataTransfer.dropEffect === "link") {
            node = evt.originalEvent.target;
            return node.parentNode.removeChild(node);
          }
        }
      });
    };

    return DesktopEntry;

  })(Item);

  Folder = (function(_super) {

    __extends(Folder, _super);

    function Folder() {
      return Folder.__super__.constructor.apply(this, arguments);
    }

    Folder.prototype.icon_open = function() {
      return this._$().find("img")[0].src = "/usr/share/icons/oxygen/48x48/status/folder-open.png";
    };

    Folder.prototype.icon_close = function() {
      return this._$().find("img")[0].src = "/usr/share//icons/oxygen/48x48/mimetypes/inode-directory.png";
    };

    Folder.prototype.render = function() {
      var _this = this;
      Folder.__super__.render.apply(this, arguments).render();
      return this._$().drop({
        drop: function(evt) {
          evt.dataTransfer.getData("text/uri-list");
          _this.icon_close();
          return evt.preventDefault();
        },
        over: function(evt) {
          var path;
          path = evt.dataTransfer.getData("text/uri-list");
          if (path === ("file://" + _this.path)) {
            echo("same");
            evt.dataTransfer.dropEffect = "none";
            evt.preventDefault();
          } else {
            evt.dataTransfer.dropEffect = "link";
            evt.preventDefault();
          }
          _this.icon_open();
          return echo("over");
        },
        enter: function(evt) {
          echo(_this.path);
          return echo("enter");
        },
        leave: function(evt) {
          return _this.icon_close();
        }
      });
    };

    return Folder;

  })(DesktopEntry);

  NormalFile = (function(_super) {

    __extends(NormalFile, _super);

    function NormalFile() {
      return NormalFile.__super__.constructor.apply(this, arguments);
    }

    return NormalFile;

  })(DesktopEntry);

  DesktopApplet = (function(_super) {

    __extends(DesktopApplet, _super);

    function DesktopApplet() {
      return DesktopApplet.__super__.constructor.apply(this, arguments);
    }

    return DesktopApplet;

  })(Item);

  create_item = function(info) {
    switch (info.type) {
      case "Entry":
        return new DesktopEntry(info.name, info.icon, info.exec, info.path);
      case "File":
        return new NormalFile(info.name, info.icon, info.exec, info.path);
      case "Dir":
        return new Folder(info.name, info.icon, info.exec, info.path);
      default:
        return echo("don't support type");
    }
  };

  $(function() {
    var ctx, grid, info, _i, _len, _ref;
    _ref = Desktop.Core.get_desktop_items();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      info = _ref[_i];
      create_item(info).render();
    }
    grid = document.querySelector("#grid");
    grid.width = document.body.scrollWidth;
    grid.height = document.body.scrollHeight;
    ctx = grid.getContext('2d');
    return draw_grid(ctx);
  });

}).call(this);
