// Generated by CoffeeScript 1.6.2
(function() {
<<<<<<< HEAD
  var DEEPIN_ITEM_ID, Weather, assert, build_menu, calc_text_size, clamp, create_element, create_img, dnd_is_deepin_item, dnd_is_desktop, dnd_is_file, echo, find_drag_target, get_function_name, get_page_xy, run_post, swap_element, _,
=======
  var $, $s, DEEPIN_ITEM_ID, D_ICON_SIZE_BIG, D_ICON_SIZE_NORMAL, D_ICON_SIZE_SMALL, Gadget, Module, Mouse_Select_Area_box, Weather, Widget, ajax, all_item, apply_animation, apply_flash, apply_rotate, assert, build_menu, calc_pos_to_pos_distance, calc_row_and_cols, calc_text_size, cancel_all_selected_stats, cancel_item_selected, clamp, clear_all_positions, clear_occupy, clear_occupy_table, cols, compare_pos_rect, compare_pos_top_left, compress_selected_items, connect_default_signals, coord_to_pos, create_element, create_entry_to_new_item, create_img, create_item_grid, decompress_selected_items, decompress_selected_items_here, delete_selected_items, detect_occupy, discard_position, div_grid, dnd_is_deepin_item, dnd_is_desktop, dnd_is_file, do_cut_completed, do_desktop_config_changed, do_desktop_get_focus, do_desktop_lost_focus, do_item_delete, do_item_rename, do_item_update, do_trash_update, do_workarea_changed, drag_canvas, drag_context, drag_start, draw_icon_on_canvas, echo, find_drag_target, find_free_position, find_item_by_coord_delta, g_desktop_entry, get_function_name, get_items_compressibility, get_page_xy, gird_left_mousedown, grid_do_itemselected, grid_do_keydown_to_shortcut, grid_do_keypress_to_shrotcut, grid_do_keyup_to_shrotcut, grid_item_height, grid_item_width, grid_right_click, ingore_keyup_counts, init_grid_drop, init_occupy_table, is_selected_multiple_items, item_dragend_handler, item_dragstart_handler, last_widget, last_widget_has_focus, load_position, menu_create_new_file, menu_create_new_folder, menu_sort_desktop_item_by_mtime, menu_sort_desktop_item_by_name, move_to_anywhere, move_to_position, move_to_somewhere, o_table, open_selected_items, paste_from_clipboard, pixel_to_pos, place_desktop_items, rightclick_pos, rows, run_post, s_height, s_offset_x, s_offset_y, s_width, save_position, sel, selected_copy_to_clipboard, selected_cut_to_clipboard, selected_item, set_all_item_selected, set_item_selected, set_occupy, show_entries_properties, show_selected_items_properties, sort_desktop_item_by_func, sort_list_by_mtime_from_id, sort_list_by_name_from_id, speical_item, swap_element, update_gird_position, update_position, update_selected_item_drag_image, update_selected_stats, _, _CFG_SHOW_COMPUTER_ICON_, _CFG_SHOW_DSC_ICON_, _CFG_SHOW_HOME_ICON_, _CFG_SHOW_TRASH_BIN_ICON_, _DND_DATA_TYPE_NAME_, _DND_DESKTOP_MARK_, _FAI_READ_ONLY_, _FAT_SYM_LINK_, _FAT_UNREADABLE_, _GET_CFG_BOOL_, _ICON_ID_COMPUTER_, _ICON_ID_DSC_, _ICON_ID_TRASH_BIN_, _ICON_ID_TRASH_BIN_FULL_, _ICON_ID_USER_HOME_, _IS_DND_INTERLNAL_, _ITEM_HEIGHT_, _ITEM_ID_COMPUTER_, _ITEM_ID_DSC_, _ITEM_ID_TRASH_BIN_, _ITEM_ID_USER_HOME_, _ITEM_WIDTH_, _RENAME_TIME_DELAY_, _SET_DND_INTERNAL_FLAG_, _events,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Storage.prototype.setObject = function(key, value) {
    return this.setItem(key, JSON.stringify(value));
  };

  Storage.prototype.getObject = function(key) {
    return JSON.parse(this.getItem(key));
  };

  String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };

  Array.prototype.remove = function(el) {
    var i;

    i = this.indexOf(el);
    if (i !== -1) {
      return this.splice(this.indexOf(el), 1)[0];
    }
  };

  echo = function(log) {
    return console.log(log);
  };

  assert = function(value, msg) {
    if (!value) {
      throw new Error(msg);
    }
  };

  _ = function(s) {
    return DCore.gettext(s);
  };

  build_menu = function(info) {
    var i, m, sm, v, _i, _len;

    m = new DeepinMenu;
    for (_i = 0, _len = info.length; _i < _len; _i++) {
      v = info[_i];
      if (v.length === 0) {
        i = new DeepinMenuItem(2, 0, 0, 0);
      } else if (typeof v[0] === "number") {
        i = new DeepinMenuItem(0, v[0], v[1], null);
        if (v.length > 2 && v[2] === false) {
          i.enabled = false;
        } else {
          i.enabled = true;
        }
      } else {
        sm = build_menu(v[1]);
        i = new DeepinMenuItem(1, 0, v[0], sm);
      }
      m.appendItem(i);
    }
    return m;
  };

  get_page_xy = function(el, x, y) {
    var p;

    return p = webkitConvertPointFromNodeToPage(el, new WebKitPoint(x, y));
  };

  find_drag_target = function(el) {
    var p;

    p = el;
    if (p.draggable) {
      return p;
    }
    while (p = el.parentNode) {
      if (p.draggable) {
        return p;
      }
    }
    return null;
  };

  swap_element = function(c1, c2) {
    var tmp;

    if (c1.parentNode === c2.parentNode) {
      tmp = document.createElement('div');
      c1.parentNode.insertBefore(tmp, c1);
      c2.parentNode.insertBefore(c1, c2);
      tmp.parentNode.insertBefore(c2, tmp);
      return tmp.parentNode.removeChild(tmp);
    }
  };

  document.body.ondrop = function(e) {
    return e.preventDefault();
  };

  run_post = function(f, self) {
    var f2;

    f2 = f.bind(self || this);
    return setTimeout(f2, 0);
  };

  create_element = function(type, clss, parent) {
    var el;

    el = document.createElement(type);
    if (clss) {
      el.setAttribute("class", clss);
    }
    if (parent) {
      parent.appendChild(el);
    }
    return el;
  };

  create_img = function(clss, src, parent) {
    var el;

    el = create_element('img', clss, parent);
    el.src = src;
    el.draggable = false;
    return el;
  };

  calc_text_size = function(txt, width) {
    var h, tmp;

    tmp = create_element('div', 'hidden_calc_text', document.body);
    tmp.innerText = txt;
    tmp.style.width = "" + width + "px";
    h = tmp.clientHeight;
    document.body.removeChild(tmp);
    return h;
  };

  clamp = function(value, min, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  };

  get_function_name = function() {
    if (!arguments.caller) {
      return "AnymouseFunction";
    }
    return /function (.*?)\(/.exec(arguments.caller.toString())[1];
  };

  DEEPIN_ITEM_ID = "deepin-item-id";

  dnd_is_desktop = function(e) {
    return e.dataTransfer.getData("text/uri-list").trim().endsWith(".desktop");
  };

  dnd_is_deepin_item = function(e) {
    if (e.dataTransfer.getData(DEEPIN_ITEM_ID)) {
      return true;
    } else {
      return false;
    }
  };

  dnd_is_file = function(e) {
    return e.dataTransfer.getData("text/uri-list").length !== 0;
  };

<<<<<<< HEAD
  Weather = (function() {
    var auto_update, city, cityid, cityid_info, cityurl, date, i_week, img_url_first, pic1, pic2, pic3, pic4, pic5, pic6, prov2city, refresh, temperature_now, tempratue1, tempratue2, tempratue3, tempratue4, tempratue5, tempratue6, weather_click_times, weather_data, weather_now_pic, week_n, week_name, xhr;

    weather_data = null;

    prov2city = null;

    xhr = null;

    cityurl = null;

    cityid = null;

    cityid_info = null;

    weather_now_pic = null;

    temperature_now = null;

    city = null;

    date = null;

    i_week = 0;

    week_n = null;

    week_name = null;

    pic1 = null;

    pic2 = null;

    pic3 = null;

    pic4 = null;

    pic5 = null;

    pic6 = null;

    tempratue1 = null;

    tempratue2 = null;

    tempratue3 = null;

    tempratue4 = null;

    tempratue5 = null;

    tempratue6 = null;

    refresh = null;

    weather_click_times = 0;

    auto_update = null;

    img_url_first = "desktop_plugin/weather/img/";

    function Weather() {
      this.weathergui_init = __bind(this.weathergui_init, this);
      var a1, a2, a3, city_and_date, fifth_day_weather_data, first_day_weather_data, fourth_day_weather_data, i, j, l1, l2, l3, more_city, more_city_menu, more_weather_menu, second_day_weather_data, sixth_day_weather_data, temp_str, temper, third_day_weather_data, u1, weather_now, week,
        _this = this;

      this.element = document.createElement('div');
      this.element.setAttribute('class', "Weather");
      this.element.draggable = true;
      this.weathergui_init();
      weather_now = create_element("div", "weather_now", this.element);
      weather_now.style.position = "absolute";
      weather_now.style.top = "7px";
      weather_now.style.left = "20px";
      weather_now_pic = create_element("img", null, weather_now);
      weather_now_pic.src = img_url_first + weather_data.weatherinfo.img1 + ".png";
=======
  ajax = function(url, method, callback, asyn) {
    var xhr;

    if (asyn == null) {
      asyn = true;
    }
    xhr = new XMLHttpRequest();
    xhr.open(method, url, asyn);
    xhr.send(null);
    return xhr.onreadystatechange = function() {
      if (xhr.readyState === 4 && xhr.status === 200) {
        return typeof callback === "function" ? callback(xhr) : void 0;
      }
    };
  };

  apply_animation = function(el, name, duration, timefunc) {
    el.style.webkitAnimationName = name;
    el.style.webkitAnimationDuration = duration;
    return el.style.webkitAnimationTimingFunction = timefunc || "linear";
  };

  apply_rotate = function(el, time) {
    var id;

    apply_animation(el, "rotate", "" + time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  apply_flash = function(el, time) {
    var id;

    apply_animation(el, "flash", "" + time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  Module = (function() {
    var moduleKeywords;

    function Module() {}

    moduleKeywords = ['extended', 'included'];

    Module.extended = function(obj) {
      var key, value, _ref;

      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.included = function(obj, parms) {
      var key, value, _ref, _ref1;

      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return (_ref1 = obj.__init__) != null ? _ref1.call(this, parms) : void 0;
    };

    return Module;

  })();

  _events = ['blur', 'change', 'click', 'contextmenu', 'buildmenu', 'rightclick', 'copy', 'cut', 'dblclick', 'error', 'focus', 'keydown', 'keypress', 'keyup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mousewheel', 'paste', 'reset', 'resize', 'scroll', 'select', 'submit', 'DOMActivate', 'DOMAttrModified', 'DOMCharacterDataModified', 'DOMFocusIn', 'DOMFocusOut', 'DOMMouseScroll', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMSubtreeModified', 'textInput', 'dragstart', 'dragend', 'dragover', 'drag', 'drop', 'dragenter', 'dragleave', 'itemselected', 'webkitTransitionEnd'];

  Widget = (function(_super) {
    __extends(Widget, _super);

    Widget.object_table = {};

    Widget.look_up = function(id) {
      return this.object_table[id];
    };

    function Widget() {
      var el, f_menu, f_rclick, k, key, v, _ref,
        _this = this;

      el = document.createElement('div');
      el.setAttribute('class', this.constructor.name);
      el.id = this.id;
      this.element = el;
      Widget.object_table[this.id] = this;
      f_menu = null;
      f_rclick = null;
      _ref = this.constructor.prototype;
      for (k in _ref) {
        v = _ref[k];
        if (!(k.search("do_") === 0)) {
          continue;
        }
        key = k.substr(3);
        if (__indexOf.call(_events, key) >= 0) {
          if (key === "rightclick") {
            f_rclick = v.bind(this);
          } else if (key === "buildmenu") {
            f_menu = v.bind(this);
          } else if (key === "contextmenu") {
            "nothing should do";
          } else {
            this.element.addEventListener(key, v.bind(this));
          }
        } else {
          echo("found the do_ prefix but the name " + key + " is not an dom events");
        }
      }
      this.element.addEventListener("contextmenu", function(e) {
        if (f_rclick) {
          f_rclick(e);
        }
        if (f_menu) {
          _this.element.contextMenu = build_menu(f_menu());
          return e.stopPropagation();
        }
      });
    }

    Widget.prototype.destroy = function() {
      var _ref;

      if ((_ref = this.element.parentElement) != null) {
        _ref.removeChild(this.element);
      }
      return delete Widget.object_table[this.id];
    };

    Widget.prototype.add_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.add(name);
    };

    Widget.prototype.remove_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.remove(name);
    };

    return Widget;

  })(Module);

  $ = function(q, o) {
    var _ref;

    return (_ref = $s(q, o)) != null ? _ref[0] : void 0;
  };

  $s = function(q, o) {
    var div, selector;

    if (typeof q !== 'string') {
      div = q;
      selector = o;
    } else {
      div = document;
      selector = q;
    }
    switch (selector.charAt(0)) {
      case '#':
        return [div.getElementById(selector.substr(1))];
      case '.':
        return div.getElementsByClassName(selector.substr(1));
      default:
        return div.getElementsByTagName(selector);
    }
  };

  _DND_DATA_TYPE_NAME_ = "text/operate-type";

  _DND_DESKTOP_MARK_ = "desktop_internal";

  _SET_DND_INTERNAL_FLAG_ = function(evt) {
    return evt.dataTransfer.setData(_DND_DATA_TYPE_NAME_, _DND_DESKTOP_MARK_);
  };

  _IS_DND_INTERLNAL_ = function(evt) {
    return evt.dataTransfer.getData(_DND_DATA_TYPE_NAME_) === _DND_DESKTOP_MARK_;
  };

  _ITEM_WIDTH_ = 80 + 6 * 2;

  _ITEM_HEIGHT_ = 84 + 4 * 2;

  _RENAME_TIME_DELAY_ = 600;

  _ITEM_ID_COMPUTER_ = "Computer_Virtual_Dir";

  _ITEM_ID_USER_HOME_ = "Home_Virtual_Dir";

  _ITEM_ID_TRASH_BIN_ = "Trash_Virtual_Dir";

  _ITEM_ID_DSC_ = "DSC_Virtual_Button";

  _ICON_ID_COMPUTER_ = "computer";

  _ICON_ID_USER_HOME_ = "deepin-user-home";

  _ICON_ID_TRASH_BIN_FULL_ = "user-trash-full";

  _ICON_ID_TRASH_BIN_ = "user-trash";

  _ICON_ID_DSC_ = "deepin-software-center";

  D_ICON_SIZE_SMALL = 16;

  D_ICON_SIZE_NORMAL = 48;

  D_ICON_SIZE_BIG = 96;

  _FAI_READ_ONLY_ = "emblem-readonly";

  _FAT_SYM_LINK_ = "emblem-symbolic-link";

  _FAT_UNREADABLE_ = "emblem-unreadable";

  g_desktop_entry = DCore.DEntry.create_by_path(DCore.Desktop.get_desktop_path());

  _CFG_SHOW_COMPUTER_ICON_ = "show-computer-icon";

  _CFG_SHOW_HOME_ICON_ = "show-home-icon";

  _CFG_SHOW_TRASH_BIN_ICON_ = "show-trash-icon";

  _CFG_SHOW_DSC_ICON_ = "show-dsc-icon";

  _GET_CFG_BOOL_ = function(val) {
    return DCore.Desktop.get_config_boolean(val);
  };

  s_width = 0;

  s_height = 0;

  s_offset_x = 0;

  s_offset_y = 0;

  grid_item_width = 0;

  grid_item_height = 0;

  cols = 0;

  rows = 0;

  div_grid = null;

  o_table = null;

  all_item = new Array;

  speical_item = new Array;

  selected_item = new Array;

  last_widget = "";

  drag_canvas = null;

  drag_context = null;

  drag_start = {
    x: 0,
    y: 0
  };

  sel = null;

  ingore_keyup_counts = 0;

  rightclick_pos = {
    clientX: 0,
    clientY: 0
  };

  draw_icon_on_canvas = function(canvas_cantext, start_x, start_y, icon, title) {
    var line_number, line_text, m, n, rest_text, _results;

    if (icon.src.length) {
      canvas_cantext.shadowColor = "rgba(0, 0, 0, 0)";
      canvas_cantext.drawImage(icon, start_x + (_ITEM_WIDTH_ - icon.width) / 2, start_y, icon.width, icon.height);
    }
    canvas_cantext.shadowOffsetX = 1;
    canvas_cantext.shadowOffsetY = 1;
    canvas_cantext.shadowColor = "rgba(0, 0, 0, 1.0)";
    canvas_cantext.shadowBlur = 1.5;
    canvas_cantext.font = "small san-serif";
    canvas_cantext.fillStyle = "rgba(255, 255, 255, 1.0)";
    canvas_cantext.textAlign = "center";
    rest_text = title;
    line_number = 0;
    _results = [];
    while (rest_text.length > 0) {
      if (rest_text.length < 10) {
        n = rest_text.length;
      } else {
        n = 10;
      }
      m = canvas_cantext.measureText(rest_text.substr(0, n)).width;
      if (m === 90) {

      } else if (m > 90) {
        --n;
        while (n > 0 && canvas_cantext.measureText(rest_text.substr(0, n)).width > 90) {
          --n;
        }
      } else {
        ++n;
        while (n <= rest_text.length && canvas_cantext.measureText(rest_text.substr(0, n)).width < 90) {
          ++n;
        }
      }
      line_text = rest_text.substr(0, n);
      rest_text = rest_text.substr(n);
      canvas_cantext.fillText(line_text, start_x + 46, start_y + 64 + line_number * 14, 90);
      _results.push(++line_number);
    }
    return _results;
  };

  calc_row_and_cols = function(wa_width, wa_height) {
    var g_ITEM_HEIGHT_, g_ITEM_WIDTH_, n_cols, n_rows, xx, yy;

    n_cols = Math.floor(wa_width / _ITEM_WIDTH_);
    n_rows = Math.floor(wa_height / _ITEM_HEIGHT_);
    xx = wa_width % _ITEM_WIDTH_;
    yy = wa_height % _ITEM_HEIGHT_;
    g_ITEM_WIDTH_ = _ITEM_WIDTH_ + Math.floor(xx / n_cols);
    g_ITEM_HEIGHT_ = _ITEM_HEIGHT_ + Math.floor(yy / n_rows);
    return [n_cols, n_rows, g_ITEM_WIDTH_, g_ITEM_HEIGHT_];
  };

  update_gird_position = function(wa_x, wa_y, wa_width, wa_height) {
    var _ref;

    s_offset_x = wa_x;
    s_offset_y = wa_y;
    s_width = wa_width;
    s_height = wa_height;
    div_grid.style.left = s_offset_x;
    div_grid.style.top = s_offset_y;
    div_grid.style.width = s_width;
    div_grid.style.height = s_height;
    _ref = calc_row_and_cols(s_width, s_height), cols = _ref[0], rows = _ref[1], grid_item_width = _ref[2], grid_item_height = _ref[3];
  };

  load_position = function(id) {
    var pos;

    if (typeof id !== "string") {
      echo("error load_position " + id);
    }
    pos = localStorage.getObject("id:" + id);
    if (pos === null) {
      return null;
    }
    if (cols > 0 && pos.x + pos.width - 1 >= cols) {
      pos.x = cols - pos.width;
    }
    if (cols > 0 && pos.y + pos.height - 1 >= rows) {
      pos.y = rows - pos.height;
    }
    return pos;
  };

  save_position = function(id, pos) {
    assert("string" === typeof id, "[save_position]id not string");
    assert(pos !== null, "[save_position]pos null");
    localStorage.setObject("id:" + id, pos);
  };

  discard_position = function(id) {
    assert("string" === typeof id, "[discard_position]id not string");
    localStorage.removeItem("id:" + id);
  };

  clear_all_positions = function() {
    var i, val, _i, _ref;

    for (i = _i = _ref = localStorage.length - 1; _i > -1; i = _i += -1) {
      if ((val = localStorage.key(i)).match(/^id:.+/i)) {
        localStorage.removeItem(val);
      }
    }
    echo("all positions cleared");
  };

  update_position = function(old_id, new_id) {
    var o_p;

    assert("string" === typeof old_id, "[update_position]accept not string old_id");
    assert("string" === typeof new_id, "[update_position]accept not string new_id");
    if ((o_p = load_position(old_id)) != null) {
      discard_position(old_id);
      save_position(new_id, o_p);
    }
  };

  place_desktop_items = function() {
    var i, not_founds, total_item, w, _i, _j, _len, _len1;

    init_occupy_table();
    total_item = speical_item.concat(all_item);
    not_founds = [];
    for (_i = 0, _len = total_item.length; _i < _len; _i++) {
      i = total_item[_i];
      if (load_position(i) !== null) {
        w = Widget.look_up(i);
        if (w != null) {
          move_to_anywhere(w);
        }
      } else {
        not_founds.push(i);
      }
    }
    for (_j = 0, _len1 = not_founds.length; _j < _len1; _j++) {
      i = not_founds[_j];
      w = Widget.look_up(i);
      if (w != null) {
        move_to_anywhere(w);
      }
    }
  };

  compare_pos_top_left = function(base, pos) {
    if (pos.y < base.y) {
      return -1;
    } else if (pos.y >= base.y && pos.y <= base.y + base.height - 1) {
      if (pos.x < base.x) {
        return -1;
      } else if (pos.x >= base.x && pos.x <= base.x + base.width - 1) {
        return 0;
      } else {
        return 1;
      }
    } else {
      return 1;
    }
  };

  compare_pos_rect = function(base1, base2, pos) {
    var bottom_left, bottom_right, top_left, top_right, _ref, _ref1;

    top_left = Math.min(base1.x, base2.x);
    top_right = Math.max(base1.x, base2.x);
    bottom_left = Math.min(base1.y, base2.y);
    bottom_right = Math.max(base1.y, base2.y);
    if ((top_left <= (_ref = pos.x) && _ref <= top_right) && (bottom_left <= (_ref1 = pos.y) && _ref1 <= bottom_right)) {
      return true;
    } else {
      return false;
    }
  };

  calc_pos_to_pos_distance = function(base, pos) {
    return Math.sqrt(Math.pow(Math.abs(base.x - pos.x), 2) + Math.pow(Math.abs(base.y - pos.y), 2));
  };

  find_item_by_coord_delta = function(start_item, x_delta, y_delta) {
    var find_pos, i, items, pos, w, _i, _len, _ref, _ref1;

    items = speical_item.concat(all_item);
    pos = load_position(start_item.get_id());
    while (true) {
      if (x_delta !== 0) {
        pos.x += x_delta;
        if (x_delta > 0 && pos.x > cols) {
          break;
        } else if (x_delta < 0 && pos.x < 0) {
          break;
        }
      }
      if (y_delta !== 0) {
        pos.y += y_delta;
        if (y_delta > 0 && pos.y > rows) {
          break;
        } else if (y_delta < 0 && pos.y < 0) {
          break;
        }
      }
      if (detect_occupy(pos) === false) {
        continue;
      }
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        i = items[_i];
        w = Widget.look_up(i);
        if (w == null) {
          continue;
        }
        find_pos = load_position(w.get_id());
        if (((find_pos.x <= (_ref = pos.x) && _ref <= find_pos.x + find_pos.width - 1)) && ((find_pos.y <= (_ref1 = pos.y) && _ref1 <= find_pos.y + find_pos.height - 1))) {
          return w;
        }
      }
    }
    return null;
  };

  init_occupy_table = function() {
    var i, _i;

    o_table = new Array();
    for (i = _i = 0; 0 <= cols ? _i <= cols : _i >= cols; i = 0 <= cols ? ++_i : --_i) {
      o_table[i] = new Array(rows);
    }
  };

  clear_occupy_table = function() {
    var i, j, _i, _j;

    for (i = _i = 0; 0 <= cols ? _i < cols : _i > cols; i = 0 <= cols ? ++_i : --_i) {
      for (j = _j = 0; 0 <= rows ? _j < rows : _j > rows; j = 0 <= rows ? ++_j : --_j) {
        o_table[i][j] = null;
      }
    }
    echo("all occupy cleared");
  };

  clear_occupy = function(id, info) {
    var i, j, _i, _j, _ref, _ref1;

    for (i = _i = 0, _ref = info.width - 1; _i <= _ref; i = _i += 1) {
      for (j = _j = 0, _ref1 = info.height - 1; _j <= _ref1; j = _j += 1) {
        if (o_table[info.x + i][info.y + j] === id) {
          o_table[info.x + i][info.y + j] = null;
        } else {
          return false;
        }
      }
    }
    return true;
  };

  set_occupy = function(id, info) {
    var i, j, _i, _j, _ref, _ref1;

    assert(info !== null, "[set_occupy] get null info");
    for (i = _i = 0, _ref = info.width - 1; _i <= _ref; i = _i += 1) {
      for (j = _j = 0, _ref1 = info.height - 1; _j <= _ref1; j = _j += 1) {
        o_table[info.x + i][info.y + j] = id;
      }
    }
  };

  detect_occupy = function(info) {
    var i, j, _i, _j, _ref, _ref1;

    assert(info !== null, "[detect_occupy]get null info");
    for (i = _i = 0, _ref = info.width - 1; _i <= _ref; i = _i += 1) {
      for (j = _j = 0, _ref1 = info.height - 1; _j <= _ref1; j = _j += 1) {
        if (o_table[info.x + i][info.y + j]) {
          return true;
        }
      }
    }
    return false;
  };

  pixel_to_pos = function(x, y, w, h) {
    var index_x, index_y;

    index_x = Math.min(Math.floor(x / grid_item_width), cols - 1);
    index_y = Math.min(Math.floor(y / grid_item_height), rows - 1);
    return coord_to_pos(index_x, index_y, w, h);
  };

  coord_to_pos = function(pos_x, pos_y, w, h) {
    return {
      x: pos_x,
      y: pos_y,
      width: w,
      height: h
    };
  };

  find_free_position = function(w, h) {
    var i, info, j, _i, _j, _ref, _ref1;

    info = {
      x: 0,
      y: 0,
      width: w,
      height: h
    };
    for (i = _i = 0, _ref = cols - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      for (j = _j = 0, _ref1 = rows - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        if (o_table[i][j] == null) {
          info.x = i;
          info.y = j;
          return info;
        }
      }
    }
    return null;
  };

  move_to_anywhere = function(widget) {
    var info;

    info = load_position(widget.get_id());
    if ((info != null) && !detect_occupy(info)) {
      move_to_position(widget, info);
      echo("" + (widget.get_id()) + " Y " + info.x + ", " + info.y);
    } else {
      info = find_free_position(1, 1);
      move_to_position(widget, info);
      echo("" + (widget.get_id()) + " N " + info.x + ", " + info.y);
    }
  };

  move_to_somewhere = function(widget, pos) {
    if (!detect_occupy(pos)) {
      move_to_position(widget, pos);
    } else {
      pos = find_free_position(1, 1);
      move_to_position(widget, pos);
    }
  };

  move_to_position = function(widget, info) {
    var old_info;

    old_info = load_position(widget.get_id());
    if (info == null) {
      return;
    }
    save_position(widget.get_id(), info);
    widget.move(info.x * grid_item_width, info.y * grid_item_height);
    if (old_info != null) {
      clear_occupy(widget.get_id(), old_info);
    }
    set_occupy(widget.get_id(), info);
  };

  sort_list_by_name_from_id = function(id1, id2) {
    var w1, w2;

    w1 = Widget.look_up(id1);
    w2 = Widget.look_up(id2);
    if ((w1 == null) || (w2 == null)) {
      echo("we get error here[sort_list_by_name_from_id]");
      return id1.localeCompare(id2);
    } else {
      return w1.get_name().localeCompare(w2.get_name());
    }
  };

  sort_list_by_mtime_from_id = function(id1, id2) {
    var w1, w2;

    w1 = Widget.look_up(id1);
    w2 = Widget.look_up(id2);
    if ((w1 == null) || (w2 == null)) {
      echo("we get error here[sort_list_by_mtime_from_id]");
      return w1.localeCompare(w2);
    } else {
      return w1.get_mtime() - w2.get_mtime();
    }
  };

  sort_desktop_item_by_func = function(func) {
    var i, item_ordered_list, w, _i, _j, _len, _len1;

    echo("======sort start======");
    clear_all_positions();
    item_ordered_list = all_item.concat();
    item_ordered_list.sort(func);
    clear_occupy_table();
    for (_i = 0, _len = speical_item.length; _i < _len; _i++) {
      i = speical_item[_i];
      w = Widget.look_up(i);
      if (w != null) {
        move_to_anywhere(w);
      }
    }
    for (_j = 0, _len1 = item_ordered_list.length; _j < _len1; _j++) {
      i = item_ordered_list[_j];
      w = Widget.look_up(i);
      if (w != null) {
        move_to_anywhere(w);
      }
    }
    echo("+======sort end======+");
  };

  menu_sort_desktop_item_by_name = function() {
    sort_desktop_item_by_func(sort_list_by_name_from_id);
  };

  menu_sort_desktop_item_by_mtime = function() {
    sort_desktop_item_by_func(sort_list_by_mtime_from_id);
  };

  create_entry_to_new_item = function(entry) {
    var pos, w;

    w = Widget.look_up(DCore.DEntry.get_id(entry));
    if (w == null) {
      w = create_item(entry);
    }
    cancel_all_selected_stats();
    pos = pixel_to_pos(rightclick_pos.clientX, rightclick_pos.clientY, 1, 1);
    move_to_somewhere(w, pos);
    all_item.push(w.get_id());
    set_item_selected(w);
    return w.item_rename();
  };

  menu_create_new_folder = function() {
    var entry;

    entry = DCore.Desktop.new_directory();
    return create_entry_to_new_item(entry);
  };

  menu_create_new_file = function() {
    var entry;

    entry = DCore.Desktop.new_file();
    return create_entry_to_new_item(entry);
  };

  init_grid_drop = function() {
    var _this = this;

    div_grid.addEventListener("drop", function(evt) {
      var desktop_uri, f_e, file, i, p, pos, tmp_copy, tmp_move, w, xdg_target, _i, _ref;

      evt.preventDefault();
      evt.stopPropagation();
      if ((xdg_target = evt.dataTransfer.getXDSPath()).length > 0) {
        desktop_uri = "" + (DCore.DEntry.get_uri(g_desktop_entry)) + "/" + xdg_target;
        evt.dataTransfer.setXDSPath(desktop_uri);
      } else if (!_IS_DND_INTERLNAL_(evt) && evt.dataTransfer.files.length > 0) {
        tmp_copy = [];
        tmp_move = [];
        pos = pixel_to_pos(evt.clientX, evt.clientY, 1, 1);
        w = Math.sqrt(evt.dataTransfer.files.length) + 1;
        for (i = _i = 0, _ref = evt.dataTransfer.files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          file = evt.dataTransfer.files[i];
          if ((f_e = DCore.DEntry.create_by_path(file.path)) != null) {
            if (DCore.DEntry.is_native(f_e)) {
              tmp_move.push(f_e);
            } else {
              tmp_copy.push(f_e);
            }
            p = {
              x: 0,
              y: 0,
              width: 1,
              height: 1
            };
            p.x = pos.x + (i % w);
            p.y = pos.y + Math.floor(i / w);
            if (p.x >= cols || p.y >= rows) {
              continue;
            }
            if (!detect_occupy(p)) {
              save_position(DCore.DEntry.get_id(f_e), p);
            }
          }
        }
        if (tmp_move.length) {
          DCore.DEntry.move(tmp_move, g_desktop_entry);
        }
        if (tmp_copy.length) {
          DCore.DEntry.copy(tmp_copy, g_desktop_entry);
        }
      }
    });
    div_grid.addEventListener("dragover", function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (evt.dataTransfer.getXDSPath().length > 0) {
        evt.dataTransfer.dropEffect = "copy";
      } else if (!_IS_DND_INTERLNAL_(evt)) {
        evt.dataTransfer.dropEffect = "move";
      } else {
        evt.dataTransfer.dropEffect = "link";
      }
    });
    div_grid.addEventListener("dragenter", function(evt) {
      if (evt.dataTransfer.getXDSPath().length > 0) {
        evt.dataTransfer.dropEffect = "copy";
      } else if (!_IS_DND_INTERLNAL_(evt)) {
        evt.dataTransfer.dropEffect = "move";
      } else {
        evt.dataTransfer.dropEffect = "link";
      }
    });
    return div_grid.addEventListener("dragleave", function(evt) {
      evt.stopPropagation();
    });
  };

  selected_copy_to_clipboard = function() {
    var i, tmp_list, w, _i, _len;

    tmp_list = [];
    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      w = Widget.look_up(i);
      if ((w != null) && w.modifiable === true) {
        tmp_list.push(w.get_entry());
      }
    }
    return DCore.DEntry.clipboard_copy(tmp_list);
  };

  selected_cut_to_clipboard = function() {
    var i, tmp_list, w, _i, _len;

    tmp_list = [];
    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      w = Widget.look_up(i);
      if ((w != null) && w.modifiable === true) {
        tmp_list.push(w.get_entry());
        w.display_cut();
      }
    }
    return DCore.DEntry.clipboard_cut(tmp_list);
  };

  paste_from_clipboard = function() {
    return DCore.DEntry.clipboard_paste(g_desktop_entry);
  };

  item_dragstart_handler = function(widget, evt) {
    var all_selected_items, i, path, pos, w, x, y, _i, _ref;

    all_selected_items = "";
    if (selected_item.length > 0) {
      for (i = _i = 0, _ref = selected_item.length; _i < _ref; i = _i += 1) {
        w = Widget.look_up(selected_item[i]);
        if ((w == null) || w.modifiable === false) {
          continue;
        }
        path = w.get_path();
        if (path.length > 0) {
          all_selected_items += path + "\n";
        }
      }
      evt.dataTransfer.setData("text/uri-list", all_selected_items);
      _SET_DND_INTERNAL_FLAG_(evt);
      evt.dataTransfer.effectAllowed = "all";
      pos = load_position(widget.get_id());
      x = (pos.x - drag_start.x) * grid_item_width + (_ITEM_WIDTH_ / 2);
      y = (pos.y - drag_start.y) * grid_item_height + 26;
      evt.dataTransfer.setDragCanvas(drag_canvas, x, y);
    } else {
      evt.dataTransfer.effectAllowed = "none";
    }
  };

  item_dragend_handler = function(w, evt) {
    var b, coord_x_shift, coord_y_shift, dis, distance_list, far_pos, i, j, k, new_pos, old_pos, ordered_list, pos, _i, _j, _k, _len, _len1, _ref;

    if (evt.dataTransfer.dropEffect === "link") {
      old_pos = load_position(w.get_id());
      new_pos = pixel_to_pos(evt.clientX, evt.clientY, 1, 1);
      coord_x_shift = new_pos.x - old_pos.x;
      coord_y_shift = new_pos.y - old_pos.y;
      if (coord_x_shift === 0 && coord_y_shift === 0) {
        return;
      }
      far_pos = {
        x: 0,
        y: 0,
        width: 1,
        height: 1
      };
      if (coord_x_shift === 0) {
        far_pos.x = new_pos.x;
      } else if (coord_y_shift === 0) {
        far_pos.y = new_pos.y;
      } else {
        k = (new_pos.y - old_pos.y) / (new_pos.x - old_pos.x);
        b = (old_pos.y * new_pos.x - old_pos.x * new_pos.y) / (new_pos.x - old_pos.x);
        if (k < 0) {
          far_pos.x = (0 - b) / k;
        } else {
          far_pos.y = b;
        }
      }
      ordered_list = new Array();
      distance_list = new Array();
      for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
        i = selected_item[_i];
        if ((pos = load_position(i)) == null) {
          continue;
        }
        dis = calc_pos_to_pos_distance(far_pos, pos);
        for (j = _j = 0, _ref = distance_list.length; 0 <= _ref ? _j < _ref : _j > _ref; j = 0 <= _ref ? ++_j : --_j) {
          if (dis < distance_list[j]) {
            break;
          }
        }
        ordered_list.splice(j, 0, i);
        distance_list.splice(j, 0, dis);
      }
      if ((coord_x_shift <= 0 && coord_y_shift > 0) || (coord_x_shift > 0 && coord_y_shift >= 0)) {
        ordered_list.reverse();
      }
      for (_k = 0, _len1 = ordered_list.length; _k < _len1; _k++) {
        i = ordered_list[_k];
        w = Widget.look_up(i);
        if (w == null) {
          continue;
        }
        old_pos = load_position(w.get_id());
        new_pos = coord_to_pos(old_pos.x + coord_x_shift, old_pos.y + coord_y_shift, 1, 1);
        if (new_pos.x < 0 || new_pos.y < 0 || new_pos.x >= cols || new_pos.y >= rows) {
          continue;
        }
        if (!detect_occupy(new_pos)) {
          move_to_somewhere(w, new_pos);
        }
      }
      update_selected_item_drag_image();
    }
  };

  set_item_selected = function(w, change_focus, add_top) {
    var _ref;

    if (change_focus == null) {
      change_focus = true;
    }
    if (add_top == null) {
      add_top = false;
    }
    if (w.selected === false) {
      w.item_selected();
      if (add_top === true) {
        selected_item.unshift(w.get_id());
      } else {
        selected_item.push(w.get_id());
      }
      if (change_focus) {
        if (last_widget !== w.get_id()) {
          if (last_widget.length > 0) {
            if ((_ref = Widget.look_up(last_widget)) != null) {
              _ref.item_blur();
            }
          }
          last_widget = w.get_id();
        }
        if (!w.has_focus) {
          w.item_focus();
        }
      }
    }
  };

  set_all_item_selected = function() {
    var i, w, _i, _len, _ref, _results;

    _ref = speical_item.concat(all_item);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (selected_item.indexOf(i) >= 0) {
        continue;
      }
      w = Widget.look_up(i);
      if (w != null) {
        _results.push(set_item_selected(w, false));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  cancel_item_selected = function(w, change_focus) {
    var i, _ref;

    if (change_focus == null) {
      change_focus = true;
    }
    i = selected_item.indexOf(w.get_id());
    if (i < 0) {
      return false;
    }
    selected_item.splice(i, 1);
    w.item_normal();
    if (change_focus && last_widget !== w.get_id()) {
      if (last_widget.length > 0) {
        if ((_ref = Widget.look_up(last_widget)) != null) {
          _ref.item_blur();
        }
      }
      last_widget = w.get_id();
      w.item_focus();
    }
    return true;
  };

  cancel_all_selected_stats = function() {
    var i, _i, _len, _ref;

    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      if ((_ref = Widget.look_up(i)) != null) {
        _ref.item_normal();
      }
    }
    selected_item.splice(0);
  };

  update_selected_stats = function(w, evt) {
    var end_pos, i_pos, key, last_one_id, n, ret, start_pos, val, _i, _j, _len, _len1, _ref, _ref1, _ref2;

    if (evt.ctrlKey) {
      if (w.selected === true) {
        cancel_item_selected(w);
      } else {
        set_item_selected(w);
      }
    } else if (evt.shiftKey) {
      if (selected_item.length > 1) {
        last_one_id = selected_item[selected_item.length - 1];
        selected_item.splice(selected_item.length - 1, 1);
        cancel_all_selected_stats();
        selected_item.push(last_one_id);
      }
      if (selected_item.length === 1) {
        end_pos = pixel_to_pos(evt.clientX, evt.clientY, 1, 1);
        start_pos = load_position(Widget.look_up(selected_item[0]).get_id());
        ret = compare_pos_top_left(start_pos, end_pos);
        if (ret < 0) {
          _ref = speical_item.concat(all_item);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            val = Widget.look_up(key);
            i_pos = load_position(val.get_id());
            if (compare_pos_top_left(end_pos, i_pos) >= 0 && compare_pos_top_left(start_pos, i_pos) < 0) {
              set_item_selected(val, true, true);
            }
          }
        } else if (ret === 0) {
          cancel_item_selected(selected_item[0]);
        } else {
          _ref1 = speical_item.concat(all_item);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            key = _ref1[_j];
            val = Widget.look_up(key);
            i_pos = load_position(val.get_id());
            if (compare_pos_top_left(start_pos, i_pos) > 0 && compare_pos_top_left(end_pos, i_pos) <= 0) {
              set_item_selected(val, true, true);
            }
          }
        }
      } else {
        set_item_selected(w);
      }
    } else {
      n = selected_item.indexOf(w.get_id());
      if (n < 0) {
        cancel_all_selected_stats();
        set_item_selected(w);
      }
      if (n >= 0) {
        selected_item.splice(n, 1);
        cancel_all_selected_stats();
        selected_item.push(w.get_id());
        if (last_widget !== w.get_id()) {
          if (last_widget.length > 0) {
            if ((_ref2 = Widget.look_up(last_widget)) != null) {
              _ref2.item_blur();
            }
          }
          last_widget = w.get_id();
        }
      }
    }
    update_selected_item_drag_image();
  };

  update_selected_item_drag_image = function() {
    var bottom_right, drag_draw_delay_timer, i, pos, start_x, start_y, top_left, w, _i, _j, _len, _len1, _ref;

    drag_draw_delay_timer = -1;
    if (selected_item.length === 0) {
      return;
    }
    pos = load_position(selected_item[0]);
    top_left = {
      x: cols - 1,
      y: rows - 1
    };
    bottom_right = {
      x: 0,
      y: 0
    };
    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      pos = load_position(i);
      if (top_left.x > pos.x) {
        top_left.x = pos.x;
      }
      if (bottom_right.x < pos.x) {
        bottom_right.x = pos.x;
      }
      if (top_left.y > pos.y) {
        top_left.y = pos.y;
      }
      if (bottom_right.y < pos.y) {
        bottom_right.y = pos.y;
      }
    }
    if (top_left.x > bottom_right.x) {
      top_left.x = bottom_right.x;
    }
    if (top_left.y > bottom_right.y) {
      top_left.y = bottom_right.y;
    }
    drag_canvas.width = (bottom_right.x - top_left.x + 1) * _ITEM_WIDTH_;
    drag_canvas.height = (bottom_right.y - top_left.y + 1) * _ITEM_HEIGHT_;
    for (_j = 0, _len1 = selected_item.length; _j < _len1; _j++) {
      i = selected_item[_j];
      w = Widget.look_up(i);
      if (w == null) {
        continue;
      }
      pos = load_position(i);
      pos.x -= top_left.x;
      pos.y -= top_left.y;
      start_x = pos.x * _ITEM_WIDTH_;
      start_y = pos.y * _ITEM_HEIGHT_;
      draw_icon_on_canvas(drag_context, start_x, start_y, w.item_icon, w.item_name.innerText);
    }
    _ref = [top_left.x, top_left.y], drag_start.x = _ref[0], drag_start.y = _ref[1];
  };

  is_selected_multiple_items = function() {
    return selected_item.length > 1;
  };

  open_selected_items = function() {
    var i, _i, _len, _ref;

    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      if ((_ref = Widget.look_up(i)) != null) {
        _ref.item_exec();
      }
    }
  };

  delete_selected_items = function(real_delete) {
    var i, tmp, w, _i, _len;

    tmp = [];
    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      w = Widget.look_up(i);
      if ((w != null) && w.deletable === true) {
        tmp.push(w.get_entry());
      }
    }
    if (tmp.length === 0) {
      return;
    }
    if (real_delete) {
      DCore.DEntry.delete_files(tmp, true);
    } else {
      DCore.DEntry.trash(tmp);
    }
  };

  show_entries_properties = function(entries) {
    var e, entry;

    try {
      if ((entry = DCore.DEntry.create_by_path("/usr/bin/deepin-nautilus-properties")) != null) {
        DCore.DEntry.launch(entry, entries);
      }
    } catch (_error) {
      e = _error;
    }
  };

  show_selected_items_properties = function() {
    var i, tmp, w, _i, _len;

    tmp = [];
    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      if ((w = Widget.look_up(i)) != null) {
        tmp.push(w.get_entry());
      }
    }
    show_entries_properties(tmp);
  };

  compress_selected_items = function() {
    var e, i, tmp, w, _i, _len;

    tmp = [];
    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      if ((w = Widget.look_up(i)) != null) {
        tmp.push(w.get_entry());
      }
    }
    try {
      DCore.DEntry.compress_files(tmp);
    } catch (_error) {
      e = _error;
    }
  };

  decompress_selected_items = function() {
    var e, i, tmp, w, _i, _len;

    tmp = [];
    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      if ((w = Widget.look_up(i)) != null) {
        tmp.push(w.get_entry());
      }
    }
    try {
      DCore.DEntry.decompress_files(tmp);
    } catch (_error) {
      e = _error;
    }
  };

  decompress_selected_items_here = function() {
    var e, i, tmp, w, _i, _len;

    tmp = [];
    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      if ((w = Widget.look_up(i)) != null) {
        tmp.push(w.get_entry());
      }
    }
    try {
      DCore.DEntry.decompress_files_here(tmp);
    } catch (_error) {
      e = _error;
    }
  };

  get_items_compressibility = function() {
    var i, tmp, w, _i, _len;

    tmp = [];
    for (_i = 0, _len = selected_item.length; _i < _len; _i++) {
      i = selected_item[_i];
      if ((w = Widget.look_up(i))) {
        if (false === w.modifiable) {
          return 0;
        } else {
          tmp.push(w.get_entry());
        }
      }
    }
    return DCore.DEntry.files_compressibility(tmp);
  };

  gird_left_mousedown = function(evt) {
    var _ref;

    evt.stopPropagation();
    if (evt.button === 0 && evt.ctrlKey === false && evt.shiftKey === false) {
      cancel_all_selected_stats();
      if (last_widget.length > 0) {
        if ((_ref = Widget.look_up(last_widget)) != null) {
          _ref.item_blur();
        }
      }
    }
  };

  grid_right_click = function(evt) {
    var menus;

    evt.stopPropagation();
    rightclick_pos.clientX = evt.clientX;
    rightclick_pos.clientY = evt.clientY;
    if (evt.ctrlKey === false && evt.shiftKey === false) {
      cancel_all_selected_stats();
    }
    menus = [];
    menus.push([_("Sort by"), [[11, _("Name")], [12, _("Last modified time")]]]);
    menus.push([_("New"), [[21, _("Folder")], [22, _("Text document")]]]);
    menus.push([3, _("Open terminal here")]);
    menus.push([4, _("Paste"), DCore.DEntry.can_paste()]);
    menus.push([]);
    menus.push([5, _("Display settings")]);
    menus.push([6, _("Desktop settings")]);
    menus.push([7, _("Personalize")]);
    div_grid.parentElement.contextMenu = build_menu(menus);
  };

  grid_do_itemselected = function(evt) {
    switch (evt.id) {
      case 11:
        menu_sort_desktop_item_by_name();
        break;
      case 12:
        menu_sort_desktop_item_by_mtime();
        break;
      case 21:
        menu_create_new_folder();
        break;
      case 22:
        menu_create_new_file();
        break;
      case 3:
        DCore.Desktop.run_terminal();
        break;
      case 4:
        paste_from_clipboard();
        break;
      case 5:
        DCore.Desktop.run_deepin_settings("display");
        break;
      case 6:
        DCore.Desktop.run_deepin_settings("desktop");
        break;
      case 7:
        DCore.Desktop.run_deepin_settings("individuation");
        break;
      default:
        echo("not implemented function " + evt.id + "," + evt.title);
    }
  };

  grid_do_keydown_to_shortcut = function(evt) {
    var end_pos, i, item_pos, pos_a, pos_b, start_item, start_pos, w, w_f, w_i, _i, _len, _ref;

    if (evt.keyCode >= 37 && evt.keyCode <= 40) {
      evt.stopPropagation();
      evt.preventDefault();
      if (last_widget.length === 0 || ((w = Widget.look_up(last_widget)) == null)) {
        w = Widget.look_up(_ITEM_ID_COMPUTER_);
      }
      w_f = null;
      if (evt.keyCode === 37) {
        w_f = find_item_by_coord_delta(w, -1, 0);
      } else if (evt.keyCode === 38) {
        w_f = find_item_by_coord_delta(w, 0, -1);
      } else if (evt.keyCode === 39) {
        w_f = find_item_by_coord_delta(w, 1, 0);
      } else if (evt.keyCode === 40) {
        w_f = find_item_by_coord_delta(w, 0, 1);
      }
      if (w_f == null) {
        return;
      }
      if (evt.ctrlKey === true) {
        w.item_blur();
        w_f.item_focus();
        last_widget = w_f.get_id();
      } else if (evt.shiftKey === true) {
        if (selected_item.length > 1) {
          start_item = selected_item[0];
          selected_item.splice(0, 1);
          cancel_all_selected_stats();
          selected_item.push(start_item);
        }
        if (selected_item.length === 1) {
          start_pos = load_position(selected_item[0]);
          end_pos = load_position(w_f.get_id());
          if (compare_pos_top_left(start_pos, end_pos) < 0) {
            pos_a = start_pos;
            pos_b = end_pos;
          } else {
            pos_b = start_pos;
            pos_a = end_pos;
          }
          _ref = speical_item.concat(all_item);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            if ((w_i = Widget.look_up(i)) == null) {
              continue;
            }
            item_pos = load_position(w_i.get_id());
            if (compare_pos_rect(pos_a, pos_b, item_pos) === true) {
              if (!w_i.selected) {
                set_item_selected(w_i);
              }
            }
          }
          if (last_widget !== w_f.get_id()) {
            if (last_widget.length > 0 && ((w = Widget.look_up(last_widget)) != null)) {
              w.item_blur();
            }
            last_widget = w_f.get_id();
          }
        } else {
          w_f.item_selected();
        }
      } else {
        cancel_all_selected_stats();
        set_item_selected(w_f);
      }
    }
  };

  grid_do_keyup_to_shrotcut = function(evt) {
    var msg_disposed, w;

    msg_disposed = false;
    if (ingore_keyup_counts > 0) {
      --ingore_keyup_counts;
      msg_disposed = true;
    } else if (evt.keyCode === 65) {
      if (evt.ctrlKey === true && evt.shiftKey === false && evt.altKey === false) {
        set_all_item_selected();
        msg_disposed = true;
      }
    } else if (evt.keyCode === 88) {
      if (evt.ctrlKey === true && evt.shiftKey === false && evt.altKey === false) {
        selected_cut_to_clipboard();
        msg_disposed = true;
      }
    } else if (evt.keyCode === 67) {
      if (evt.ctrlKey === true && evt.shiftKey === false && evt.altKey === false) {
        selected_copy_to_clipboard();
        msg_disposed = true;
      }
    } else if (evt.keyCode === 86) {
      if (evt.ctrlKey === true && evt.shiftKey === false && evt.altKey === false) {
        paste_from_clipboard();
        msg_disposed = true;
      }
    } else if (evt.keyCode === 46) {
      if (evt.ctrlKey === false && evt.altKey === false) {
        delete_selected_items(evt.shiftKey === true);
        msg_disposed = true;
      }
    } else if (evt.keyCode === 113) {
      if (evt.ctrlKey === false && evt.shiftKey === false && evt.altKey === false) {
        if (selected_item.length === 1) {
          w = Widget.look_up(selected_item[0]);
          if (w != null) {
            w.item_rename();
          }
        }
        msg_disposed = true;
      }
    } else if (evt.keyCode === 32) {
      if (evt.ctrlKey === true) {
        if (last_widget.length > 0 && ((w = Widget.look_up(last_widget)) != null)) {
          if (w.selected === false) {
            set_item_selected(w);
            if (!w.has_focus) {
              w.item_focus();
            }
          } else {
            cancel_item_selected(w);
          }
        }
        msg_disposed = true;
      }
    }
    if (msg_disposed === true) {
      evt.stopPropagation();
      return evt.preventDefault();
    }
  };

  grid_do_keypress_to_shrotcut = function(evt) {
    var _ref;

    evt.stopPropagation();
    evt.preventDefault();
    if (evt.keyCode === 13) {
      if (evt.ctrlKey === false && evt.shiftKey === false && evt.altKey === false) {
        if (selected_item.length > 0) {
          return (_ref = Widget.look_up(last_widget)) != null ? _ref.item_exec() : void 0;
        }
      }
    }
  };

  create_item_grid = function() {
    div_grid = document.createElement("div");
    div_grid.setAttribute("id", "item_grid");
    document.body.appendChild(div_grid);
    update_gird_position(s_offset_x, s_offset_y, s_width, s_height);
    init_grid_drop();
    div_grid.parentElement.addEventListener("mousedown", gird_left_mousedown);
    div_grid.parentElement.addEventListener("contextmenu", grid_right_click);
    div_grid.parentElement.addEventListener("itemselected", grid_do_itemselected);
    div_grid.parentElement.addEventListener("keydown", grid_do_keydown_to_shortcut);
    div_grid.parentElement.addEventListener("keyup", grid_do_keyup_to_shrotcut);
    div_grid.parentElement.addEventListener("keypress", grid_do_keypress_to_shrotcut);
    sel = new Mouse_Select_Area_box(div_grid.parentElement);
    drag_canvas = document.createElement("canvas");
    return drag_context = drag_canvas.getContext('2d');
  };

  Mouse_Select_Area_box = (function() {
    function Mouse_Select_Area_box(parentElement) {
      this.mouseup_event = __bind(this.mouseup_event, this);
      this.mousemove_event = __bind(this.mousemove_event, this);
      this.mousedown_event = __bind(this.mousedown_event, this);
      this.destory = __bind(this.destory, this);      this.parent_element = parentElement;
      this.last_effect_item = new Array;
      this.element = document.createElement("div");
      this.element.setAttribute("id", "mouse_select_area_box");
      this.element.style.display = "none";
      this.parent_element.appendChild(this.element);
      this.parent_element.addEventListener("mousedown", this.mousedown_event);
    }

    Mouse_Select_Area_box.prototype.destory = function() {
      return this.parent_element.removeChild(this.element);
    };

    Mouse_Select_Area_box.prototype.mousedown_event = function(evt) {
      evt.stopPropagation();
      evt.preventDefault();
      if (evt.button === 0) {
        this.parent_element.addEventListener("mousemove", this.mousemove_event);
        this.parent_element.addEventListener("mouseup", this.mouseup_event);
        this.parent_element.addEventListener("contextmenu", this.contextmenu_event, true);
        this.start_point = evt;
        this.start_pos = pixel_to_pos(evt.clientX - s_offset_x, evt.clientY - s_offset_y, 1, 1);
        this.last_pos = this.start_pos;
      }
    };

    Mouse_Select_Area_box.prototype.contextmenu_event = function(evt) {
      evt.stopPropagation();
      evt.preventDefault();
    };

    Mouse_Select_Area_box.prototype.mousemove_event = function(evt) {
      var effect_item, i, item_pos, n, new_pos, pos_a, pos_b, sel_list, sh, sl, st, sw, temp_list, w, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _o, _p, _ref, _ref1, _ref2;

      evt.stopPropagation();
      evt.preventDefault();
      sl = Math.min(Math.max(Math.min(this.start_point.clientX, evt.clientX), s_offset_x), s_offset_x + s_width);
      st = Math.min(Math.max(Math.min(this.start_point.clientY, evt.clientY), s_offset_y), s_offset_y + s_height);
      sw = Math.min(Math.abs(evt.clientX - this.start_point.clientX), s_width - sl);
      sh = Math.min(Math.abs(evt.clientY - this.start_point.clientY), s_height - st);
      this.element.style.left = "" + sl + "px";
      this.element.style.top = "" + st + "px";
      this.element.style.width = "" + sw + "px";
      this.element.style.height = "" + sh + "px";
      this.element.style.display = "block";
      new_pos = pixel_to_pos(evt.clientX - s_offset_x, evt.clientY - s_offset_y, 1, 1);
      if (compare_pos_top_left(this.last_pos, new_pos) !== 0) {
        if (compare_pos_top_left(this.start_pos, new_pos) < 0) {
          pos_a = new_pos;
          pos_b = this.start_pos;
        } else {
          pos_a = this.start_pos;
          pos_b = new_pos;
        }
        effect_item = new Array;
        _ref = speical_item.concat(all_item);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          item_pos = load_position(i);
          if (compare_pos_rect(pos_a, pos_b, item_pos) === true) {
            effect_item.push(i);
          }
        }
        temp_list = effect_item.concat();
        sel_list = this.last_effect_item.concat();
        if (temp_list.length > 0 && sel_list.length > 0) {
          if (((w = Widget.look_up(last_widget)) != null) && w.has_focus) {
            w.item_blur();
          }
          for (i = _j = _ref1 = temp_list.length - 1; _j > -1; i = _j += -1) {
            for (n = _k = _ref2 = sel_list.length - 1; _k > -1; n = _k += -1) {
              if (temp_list[i] === sel_list[n]) {
                temp_list.splice(i, 1);
                sel_list.splice(n, 1);
                break;
              }
            }
          }
        }
        if (evt.ctrlKey === true) {
          for (_l = 0, _len1 = temp_list.length; _l < _len1; _l++) {
            i = temp_list[_l];
            w = Widget.look_up(i);
            if (w == null) {
              continue;
            } else if (w.selected === false) {
              set_item_selected(w, false);
            } else {
              cancel_item_selected(w, false);
            }
          }
          for (_m = 0, _len2 = sel_list.length; _m < _len2; _m++) {
            i = sel_list[_m];
            w = Widget.look_up(i);
            if (w == null) {
              continue;
            } else if (w.selected === false) {
              set_item_selected(w, false);
            } else {
              cancel_item_selected(w, false);
            }
          }
        } else if (evt.shiftKey === true) {
          for (_n = 0, _len3 = temp_list.length; _n < _len3; _n++) {
            i = temp_list[_n];
            w = Widget.look_up(i);
            if (w == null) {
              continue;
            }
            if (w.selected === false) {
              set_item_selected(w, false);
            }
          }
        } else {
          for (_o = 0, _len4 = temp_list.length; _o < _len4; _o++) {
            i = temp_list[_o];
            w = Widget.look_up(i);
            if (w == null) {
              continue;
            }
            if (w.selected === false) {
              set_item_selected(w, false);
            }
          }
          for (_p = 0, _len5 = sel_list.length; _p < _len5; _p++) {
            i = sel_list[_p];
            w = Widget.look_up(i);
            if (w == null) {
              continue;
            }
            if (w.selected === true) {
              cancel_item_selected(w, false);
            }
          }
        }
        this.last_pos = new_pos;
        this.last_effect_item = effect_item;
      }
    };

    Mouse_Select_Area_box.prototype.mouseup_event = function(evt) {
      evt.stopPropagation();
      evt.preventDefault();
      this.parent_element.removeEventListener("mousemove", this.mousemove_event);
      this.parent_element.removeEventListener("mouseup", this.mouseup_event);
      this.parent_element.removeEventListener("contextmenu", this.contextmenu_event, true);
      this.element.style.display = "none";
      this.last_effect_item.splice(0);
      if (selected_item.length > 0) {
        update_selected_item_drag_image();
      }
    };

    return Mouse_Select_Area_box;

  })();

  last_widget_has_focus = false;

  connect_default_signals = function() {
    DCore.signal_connect("item_update", do_item_update);
    DCore.signal_connect("item_delete", do_item_delete);
    DCore.signal_connect("item_rename", do_item_rename);
    DCore.signal_connect("trash_count_changed", do_trash_update);
    DCore.signal_connect("cut_completed", do_cut_completed);
    DCore.signal_connect("lost_focus", do_desktop_lost_focus);
    DCore.signal_connect("get_focus", do_desktop_get_focus);
    DCore.signal_connect("desktop_config_changed", do_desktop_config_changed);
    return DCore.signal_connect("workarea_changed", do_workarea_changed);
  };

  do_item_delete = function(data) {
    var id, w;

    id = DCore.DEntry.get_id(data.entry);
    if ((w = Widget.look_up(id)) != null) {
      delete_item(w);
      return update_selected_item_drag_image();
    }
  };

  do_item_update = function(data) {
    var id, w;

    id = DCore.DEntry.get_id(data.entry);
    if ((w = Widget.look_up(id)) != null) {
      w.set_entry(data.entry);
      if (typeof w.item_update === "function") {
        w.item_update();
      }
    } else if ((w = create_item(data.entry)) != null) {
      all_item.push(w.get_id());
      move_to_anywhere(w);
    }
    if (w != null) {
      return typeof w.item_hint === "function" ? w.item_hint() : void 0;
    }
  };

  do_item_rename = function(data) {
    var new_id, o_p, old_id, w;

    sel = false;
    old_id = DCore.DEntry.get_id(data.old);
    new_id = DCore.DEntry.get_id(data["new"]);
    if ((o_p = load_position(old_id)) != null) {
      save_position(new_id, o_p);
    }
    if ((w = Widget.look_up(old_id)) != null) {
      sel = cancel_item_selected(w);
      all_item.remove(old_id);
      w.destroy();
    }
    if ((w = Widget.look_up(new_id)) != null) {
      cancel_item_selected(w);
      all_item.remove(new_id);
      w.destroy();
    }
    discard_position(old_id);
    w = create_item(data["new"]);
    if (w != null) {
      move_to_anywhere(w);
      all_item.push(w.get_id());
      if (sel) {
        set_item_selected(w);
      }
    }
    update_selected_item_drag_image();
  };

  do_trash_update = function() {
    var w;

    w = Widget.look_up("Trash_Virtual_Dir");
    if (w != null) {
      return w.item_update();
    }
  };

  do_cut_completed = function(items) {
    var e, w, _i, _len;

    for (_i = 0, _len = items.length; _i < _len; _i++) {
      e = items[_i];
      w = Widget.look_up(DCore.DEntry.get_id(e));
      if ((w != null) && w.modifiable === true) {
        w.display_not_cut();
      }
    }
  };

  do_desktop_lost_focus = function() {
    var w;

    if (last_widget.length > 0 && ((w = Widget.look_up(last_widget)) != null)) {
      if (w.has_focus) {
        last_widget_has_focus = true;
        w.item_blur();
      } else {
        last_widget_has_focus = false;
      }
    }
  };

  do_desktop_get_focus = function() {
    var w;

    if (last_widget.length > 0 && ((w = Widget.look_up(last_widget)) != null) && last_widget_has_focus === true) {
      w.item_focus();
      last_widget_has_focus === false;
    }
  };

  do_desktop_config_changed = function() {
    load_speical_desktop_items();
    place_desktop_items();
  };

  do_workarea_changed = function(allo) {
    update_gird_position(allo.x + 4, allo.y + 4, allo.width - 8, allo.height - 8);
    place_desktop_items();
  };

  Gadget = (function(_super) {
    __extends(Gadget, _super);

    function Gadget(name, x, y, width, height) {
      this.move = __bind(this.move, this);
      this.do_dragstart = __bind(this.do_dragstart, this);
      this.get_pos = __bind(this.get_pos, this);
      this.set_pos = __bind(this.set_pos, this);
      this.get_id = __bind(this.get_id, this);
      this.set_id = __bind(this.set_id, this);      this.set_id();
      Gadget.__super__.constructor.call(this, this.id);
      this.element.draggable = true;
      this.pos = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      this.set_pos(x, y, width, height);
      return;
    }

    Gadget.prototype.set_id = function() {
      return this.id = "gadget";
    };

    Gadget.prototype.get_id = function() {
      return this.id;
    };

    Gadget.prototype.set_pos = function(x, y, width, height) {
      this.pos.x = x;
      this.pos.y = y;
      this.pos.width = width;
      return this.pos.height = height;
    };

    Gadget.prototype.get_pos = function() {
      return this.pos;
    };

    Gadget.prototype.do_mousedown = function(evt) {
      evt.stopPropagation();
      cancel_all_selected_stats();
    };

    Gadget.prototype.do_dragstart = function(evt) {
      evt.stopPropagation();
      gadget_dragstart_handler(this, evt);
    };

    Gadget.prototype.do_dragend = function(evt) {
      evt.stopPropagation();
      evt.preventDefault();
      gadget_dragend_handler(this, evt);
    };

    Gadget.prototype.do_rightclick = function(evt) {
      evt.stopPropagation();
      evt.preventDefault();
    };

    Gadget.prototype.move = function(x, y) {
      var style;

      style = this.element.style;
      style.position = "absolute";
      style.left = x;
      style.top = y;
    };

    return Gadget;

  })(Widget);

  Weather = (function(_super) {
    var cityid, cityurl, weather_data, xmlhttp;

    __extends(Weather, _super);

    weather_data = null;

    xmlhttp = null;

    cityurl = null;

    cityid = null;

    function Weather() {
      var a1, a2, a3, city, city_and_date, date, date_val, fifth_day_weather_data, fourth_day_weather_data, i, j, l1, l2, l3, more_city, more_city_menu, more_weather_menu, pic2, pic3, pic4, pic5, pic6, second_day_weather_data, seventeenth_day_weather_data, sixth_day_weather_data, temp_str, temper, temperature_now, tempratue, third_day_weather_data, u1, weather_now, weather_now_pic, week, week_n, week_name;

      Weather.__super__.constructor.apply(this, arguments);
      cityid = 101010100;
      cityurl = "http://m.weather.com.cn/data/" + cityid + ".html";
      this.weathergui_init();
      this.LoadXMLDoc(cityurl);
      weather_now = create_element("div", "weather_now", this.element);
      weather_now.style.position = "absolute";
      weather_now.style.top = "10px";
      weather_now.style.left = "20px";
      weather_now_pic = create_element("img", null, weather_now);
      weather_now_pic.src = "img/weather/" + weather_data.weatherinfo.img_title2 + ".png";
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
      weather_now_pic.style.width = "50px";
      weather_now_pic.style.height = "50px";
      weather_now_pic.draggable = false;
      temperature_now = create_element("div", "temperature_now", this.element);
      temperature_now.style.position = "absolute";
      temperature_now.style.top = "25px";
<<<<<<< HEAD
      temperature_now.style.left = "90px";
=======
      temperature_now.style.left = "85px";
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
      temp_str = weather_data.weatherinfo.temp1;
      i = temp_str.indexOf("℃");
      j = temp_str.lastIndexOf("℃");
      temper = (parseInt(temp_str.substring(0, i)) + parseInt(temp_str.substring(i + 2, j))) / 2;
      temperature_now.textContent = temper + "°";
<<<<<<< HEAD
      temperature_now.style.width = "50px";
      temperature_now.style.height = "50px";
      temperature_now.style.fontSize = "30px";
      temperature_now.style.color = "deepskyblue";
      city_and_date = create_element("div", "city_and_date", this.element);
      city_and_date.style.position = "absolute";
      city_and_date.style.top = "15px";
      city_and_date.style.left = "150px";
      city = create_element("div", "city", city_and_date);
      city.textContent = weather_data.weatherinfo.city;
      city.style.position = "relative";
      city.style.left = "5px";
      city.style.color = "deepskyblue";
      week_name = ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"];
      date = create_element("div", "date", city_and_date);
      date.style.color = "deepskyblue";
      date.textContent = weather_data.weatherinfo.date_y + weather_data.weatherinfo.week;
=======
      temperature_now.style.fontSize = "32px";
      temperature_now.style.color = "white";
      city_and_date = create_element("div", "city_and_date", this.element);
      city_and_date.style.position = "absolute";
      city_and_date.style.top = "15px";
      city_and_date.style.left = "140px";
      city = create_element("div", "city", city_and_date);
      city.textContent = weather_data.weatherinfo.city;
      city.style.position = "relative";
      city.style.left = "20px";
      week_name = ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"];
      date = create_element("div", "date", city_and_date);
      date.style.color = "white";
      date_val = new Date();
      week_n = date_val.getDay();
      date.textContent = date_val.toLocaleDateString() + week_name[week_n % 7];
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
      more_weather_menu = create_element("div", "more_weather_menu", this.element);
      more_weather_menu.style.position = "absolute";
      more_weather_menu.style.left = "110px";
      more_weather_menu.style.top = "65px";
      more_weather_menu.style.width = "175px";
      more_weather_menu.style.display = "none";
<<<<<<< HEAD
      first_day_weather_data = create_element("div", null, more_weather_menu);
      first_day_weather_data.style.backgroundColor = "palegoldenrod";
      first_day_weather_data.style.opacity = 0.6;
      week = create_element("a", null, first_day_weather_data);
      week.textContent = week_name[week_n % 7];
      pic1 = create_element("img", null, first_day_weather_data);
      pic1.src = img_url_first + weather_data.weatherinfo.img1 + ".png";
      pic1.style.width = "30px";
      pic1.style.height = "30px";
      tempratue1 = create_element("a", null, first_day_weather_data);
      tempratue1.textContent = weather_data.weatherinfo.temp1;
=======
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
      second_day_weather_data = create_element("div", null, more_weather_menu);
      second_day_weather_data.style.backgroundColor = "deepskyblue";
      second_day_weather_data.style.opacity = 0.6;
      week = create_element("a", null, second_day_weather_data);
      week.textContent = week_name[(week_n + 1) % 7];
      pic2 = create_element("img", null, second_day_weather_data);
<<<<<<< HEAD
      pic2.src = img_url_first + weather_data.weatherinfo.img3 + ".png";
      pic2.style.width = "30px";
      pic2.style.height = "30px";
      tempratue2 = create_element("a", null, second_day_weather_data);
      tempratue2.textContent = weather_data.weatherinfo.temp2;
=======
      pic2.src = "img/weather/" + weather_data.weatherinfo.img_title4 + ".png";
      pic2.style.width = "30px";
      pic2.style.height = "30px";
      tempratue = create_element("a", null, second_day_weather_data);
      tempratue.textContent = weather_data.weatherinfo.temp2;
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
      third_day_weather_data = create_element("div", null, more_weather_menu);
      third_day_weather_data.style.backgroundColor = "palegoldenrod";
      third_day_weather_data.style.opacity = 0.6;
      week = create_element("a", null, third_day_weather_data);
      week.textContent = week_name[(week_n + 2) % 7];
      pic3 = create_element("img", null, third_day_weather_data);
<<<<<<< HEAD
      pic3.src = img_url_first + weather_data.weatherinfo.img5 + ".png";
      pic3.style.width = "30px";
      pic3.style.height = "30px";
      tempratue3 = create_element("a", null, third_day_weather_data);
      tempratue3.textContent = weather_data.weatherinfo.temp3;
=======
      pic3.src = "img/weather/" + weather_data.weatherinfo.img_title6 + ".png";
      pic3.style.width = "30px";
      pic3.style.height = "30px";
      tempratue = create_element("a", null, third_day_weather_data);
      tempratue.textContent = weather_data.weatherinfo.temp3;
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
      fourth_day_weather_data = create_element("div", null, more_weather_menu);
      fourth_day_weather_data.style.backgroundColor = "deepskyblue";
      fourth_day_weather_data.style.opacity = 0.6;
      week = create_element("a", null, fourth_day_weather_data);
      week.textContent = week_name[(week_n + 3) % 7];
      pic4 = create_element("img", null, fourth_day_weather_data);
<<<<<<< HEAD
      pic4.src = img_url_first + weather_data.weatherinfo.img7 + ".png";
      pic4.style.width = "30px";
      pic4.style.height = "30px";
      tempratue4 = create_element("a", null, fourth_day_weather_data);
      tempratue4.textContent = weather_data.weatherinfo.temp4;
=======
      pic4.src = "img/weather/" + weather_data.weatherinfo.img_title8 + ".png";
      pic4.style.width = "30px";
      pic4.style.height = "30px";
      tempratue = create_element("a", null, fourth_day_weather_data);
      tempratue.textContent = weather_data.weatherinfo.temp4;
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
      fifth_day_weather_data = create_element("div", null, more_weather_menu);
      fifth_day_weather_data.style.backgroundColor = "palegoldenrod";
      fifth_day_weather_data.style.opacity = 0.6;
      week = create_element("a", null, fifth_day_weather_data);
      week.textContent = week_name[(week_n + 4) % 7];
      pic5 = create_element("img", null, fifth_day_weather_data);
<<<<<<< HEAD
      pic5.src = img_url_first + weather_data.weatherinfo.img9 + ".png";
      pic5.style.width = "30px";
      pic5.style.height = "30px";
      tempratue5 = create_element("a", null, fifth_day_weather_data);
      tempratue5.textContent = weather_data.weatherinfo.temp5;
=======
      pic5.src = "img/weather/" + weather_data.weatherinfo.img_title10 + ".png";
      pic5.style.width = "30px";
      pic5.style.height = "30px";
      tempratue = create_element("a", null, fifth_day_weather_data);
      tempratue.textContent = weather_data.weatherinfo.temp5;
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
      sixth_day_weather_data = create_element("div", null, more_weather_menu);
      sixth_day_weather_data.style.backgroundColor = "deepskyblue";
      sixth_day_weather_data.style.opacity = 0.6;
      week = create_element("a", null, sixth_day_weather_data);
      week.textContent = week_name[(week_n + 5) % 7];
      pic6 = create_element("img", null, sixth_day_weather_data);
<<<<<<< HEAD
      pic6.src = img_url_first + weather_data.weatherinfo.img11 + ".png";
      pic6.style.width = "30px";
      pic6.style.height = "30px";
      tempratue6 = create_element("a", null, sixth_day_weather_data);
      tempratue6.textContent = weather_data.weatherinfo.temp6;
      refresh = create_element("img", null, this.element);
      refresh.draggable = false;
      refresh.style.position = "absolute";
      refresh.style.top = "12px";
      refresh.style.left = "215px";
      refresh.src = img_url_first + "refresh.png";
      refresh.style.width = "20px";
      refresh.style.height = "20px";
      more_city = create_element("img", null, this.element);
      more_city.draggable = false;
      more_city.style.position = "relative";
      more_city.style.top = "15px";
      more_city.style.left = "190px";
      more_city.src = img_url_first + "ar.png";
      more_city_menu = create_element("div", "more_city_menu", this.element);
      more_city_menu.style.display = "none";
      u1 = create_element("div", null, more_city_menu);
      l1 = create_element("div", null, u1);
      l2 = create_element("div", null, u1);
      l3 = create_element("div", null, u1);
      a1 = create_element("div", null, l1);
      a1.innerText = "北京";
      a2 = create_element("div", null, l2);
      a2.innerText = "上海";
      a3 = create_element("div", null, l3);
      a3.innerText = "广东";
      date.addEventListener("click", function() {
        if (more_weather_menu.style.display === "none") {
          more_weather_menu.style.display = "block";
          more_city_menu.style.display = "none";
          _this.element.style.zIndex = "65535";
          return echo("more_weather_menu block ,none more_city none  ");
        } else {
          more_weather_menu.style.display = "none";
          more_city_menu.style.display = "none";
          _this.element.style.zIndex = "1";
          return echo("more_weather_menu none ,none more_city none  ");
        }
      });
      more_city.addEventListener("click", function() {
        if (more_city_menu.style.display === "none") {
          more_city_menu.style.display = "block";
          more_weather_menu.style.display = "none";
          _this.element.style.zIndex = "65535";
          return echo("more_city block , more_weather_menu none ");
        } else {
          more_city_menu.style.display = "none";
          more_weather_menu.style.display = "none";
          _this.element.style.zIndex = "1";
          return echo("more_city none , more_weather_menu none ");
        }
      });
      refresh.addEventListener("click", function() {
        refresh.style.backgroundColor = "gray";
        return _this.weathergui_update();
      });
      this.element.addEventListener("click", function() {
        weather_click_times++;
        if (weather_click_times % 2) {
          return _this.element.style.zIndex = "65535";
        } else {
          return _this.element.style.zIndex = "1";
=======
      pic6.src = "img/weather/" + weather_data.weatherinfo.img_title12 + ".png";
      pic6.style.width = "30px";
      pic6.style.height = "30px";
      tempratue = create_element("a", null, sixth_day_weather_data);
      tempratue.textContent = weather_data.weatherinfo.temp6;
      seventeenth_day_weather_data = create_element("div", null, more_weather_menu);
      seventeenth_day_weather_data.style.backgroundColor = "palegoldenrod";
      seventeenth_day_weather_data.style.opacity = 0.6;
      date.addEventListener("click", function() {
        if (more_weather_menu.style.display === "none") {
          return more_weather_menu.style.display = "block";
        } else {
          return more_weather_menu.style.display = "none";
        }
      });
      /*
          do_buildmenu : ->
      menu = []
      menu.push([1, "北京"])
      menu.push([2, "上海"])
      menu.push([3, "广州"])
      
      return menu
      */

      more_city = create_element("img", null, city);
      more_city.draggable = false;
      more_city.style.left = "/200px";
      more_city.src = "img/weather/ar.png";
      more_city_menu = create_element("div", "more_city_menu", city);
      more_city_menu.style.display = "none";
      u1 = create_element("ul", null, more_city_menu);
      l1 = create_element("li", null, u1);
      l2 = create_element("li", null, u1);
      l3 = create_element("li", null, u1);
      a1 = create_element("a", null, l1);
      a1.innerText = "北京";
      a2 = create_element("a", null, l2);
      a2.innerText = "上海";
      a3 = create_element("a", null, l3);
      a3.innerText = "广东";
      /*
      more_city_menu = create_element("div", "more_city_menu", city)
      city1 = create_element("option", null, more_city_menu)
      city1.textContext = "北京"
      city2 = create_element("option", null, more_city_menu)
      city2.textContent = "上海"
      city3 = create_element("option", null, more_city_menu)
      city3.textContent = "广州"
      */

      more_city.addEventListener("click", function() {
        if (more_city_menu.style.display === "none") {
          return more_city_menu.style.display = "block";
        } else {
          return more_city_menu.style.display = "none";
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
        }
      });
    }

<<<<<<< HEAD
    Weather.prototype.ajax = function(url, method, callback, asyn) {
      if (asyn == null) {
        asyn = true;
      }
      xhr = new XMLHttpRequest();
      xhr.open(method, url, asyn);
      xhr.send(null);
      return xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
          echo("received all over 200 update");
          return typeof callback === "function" ? callback(xhr) : void 0;
        } else if (xhr.readystate === 0) {
          return echo("init");
        } else if (xhr.readystate === 1) {
          return echo("open");
        } else if (xhr.readystate === 2) {
          return echo("send");
        } else if (xhr.readystate === 3) {
          return echo("receiving");
        }
      };
    };

    Weather.prototype.weathergui_init = function() {
      cityid = 101010100;
      cityurl = "http://m.weather.com.cn/data/" + cityid + ".html";
      this.date_init();
      return auto_update = setInterval(this.weathergui_update(), 10 * 60000);
    };

    Weather.prototype.weathergui_update = function() {
      var _this = this;

      return this.ajax(cityurl, "GET", function(xhr) {
        var i, j, str_data, temp_str, temper;

        localStorage.setItem(weather_data, xhr.responseText);
        weather_data = JSON.parse(localStorage.getItem(weather_data));
        while (i_week < week_name.length) {
          if (weather_data.weatherinfo.week === week_name[i_week]) {
            break;
          }
          i_week++;
        }
        week_n = i_week;
        weather_now_pic.src = img_url_first + weather_data.weatherinfo.img1 + ".png";
        str_data = weather_data.weatherinfo.date_y;
        date.textContent = str_data.substring(0, str_data.indexOf("年")) + "." + str_data.substring(str_data.indexOf("年") + 1, str_data.indexOf("月")) + "." + str_data.substring(str_data.indexOf("月") + 1, str_data.indexOf("日")) + weather_data.weatherinfo.week;
        temp_str = weather_data.weatherinfo.temp1;
        i = temp_str.indexOf("℃");
        j = temp_str.lastIndexOf("℃");
        temper = (parseInt(temp_str.substring(0, i)) + parseInt(temp_str.substring(i + 2, j))) / 2;
        temperature_now.textContent = temper + "°";
        city.textContent = weather_data.weatherinfo.city;
        pic1.src = img_url_first + weather_data.weatherinfo.img1 + ".png";
        tempratue1.textContent = weather_data.weatherinfo.temp1;
        pic2.src = img_url_first + weather_data.weatherinfo.img3 + ".png";
        tempratue2.textContent = weather_data.weatherinfo.temp2;
        pic3.src = img_url_first + weather_data.weatherinfo.img5 + ".png";
        tempratue3.textContent = weather_data.weatherinfo.temp3;
        pic4.src = img_url_first + weather_data.weatherinfo.img7 + ".png";
        tempratue4.textContent = weather_data.weatherinfo.temp4;
        pic5.src = img_url_first + weather_data.weatherinfo.img9 + ".png";
        tempratue5.textContent = weather_data.weatherinfo.temp5;
        pic6.src = img_url_first + weather_data.weatherinfo.img11 + ".png";
        tempratue6.textContent = weather_data.weatherinfo.temp6;
        return refresh.style.backgroundColor = null;
      });
    };

    Weather.prototype.date_init = function() {
      weather_data = {
        "weatherinfo": {
          "city": "......",
          "city_en": "......",
          "date_y": "正在加载中...",
          "date": "",
          "week": "...",
=======
    Weather.prototype.LoadXMLDoc = function(url) {
      xmlhttp = new XMLHttpRequest();
      xmlhttp.onreadystatechange = this.state_Change;
      xmlhttp.open("GET", url, true);
      return xmlhttp.send(null);
    };

    Weather.prototype.state_Change = function() {
      if (xmlhttp.readystate === 4) {
        if (xmlhttp.status === 200) {
          localStorage.setItem(info, JSON.parse(xmlhttp.responseText));
          weather_data = JSON.parse(localStorage.getItem(info));
          localStorage.removeItem(info);
          return this.weathergui_update();
        }
      } else if (xmlhttp.readystate === 0) {
        return this.weathergui_init();
      } else {

      }
    };

    Weather.prototype.weathergui_init = function() {
      weather_data = {
        "weatherinfo": {
          "city": "北京",
          "city_en": "beijing",
          "date_y": "2013年4月25日",
          "date": "",
          "week": "星期二",
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
          "fchh": "11",
          "cityid": "101010100",
          "temp1": "16℃~8℃",
          "temp2": "22℃~10℃",
          "temp3": "24℃~10℃",
          "temp4": "25℃~12℃",
          "temp5": "27℃~13℃",
          "temp6": "23℃~12℃",
          "tempF1": "60.8℉~46.4℉",
          "tempF2": "71.6℉~50℉",
          "tempF3": "75.2℉~50℉",
          "tempF4": "77℉~53.6℉",
          "tempF5": "80.6℉~55.4℉",
          "tempF6": "73.4℉~53.6℉",
          "weather1": "阵雨转晴",
          "weather2": "晴",
          "weather3": "晴",
          "weather4": "晴转多云",
          "weather5": "多云",
          "weather6": "多云转阴",
          "img1": "3",
          "img2": "0",
          "img3": "0",
          "img4": "99",
          "img5": "0",
          "img6": "99",
          "img7": "0",
          "img8": "1",
          "img9": "1",
          "img10": "99",
          "img11": "1",
<<<<<<< HEAD
          "img12": "2"
        }
      };
      return prov2city = {
        '请选择省份': ['请选择城市'],
        '北京': ['北京'],
        '上海': ['上海'],
        '黑龙江': ['牡丹江', '大兴安岭', '黑河', '齐齐哈尔', '绥化', '鹤岗', '佳木斯', '伊春', '双鸭山', '哈尔滨', '鸡西', '漠河', '大庆', '七台河', '绥芬河'],
        '安徽': ['淮南', '马鞍山', '淮北', '铜陵', '滁州', '巢湖', '池州', '宣城', '亳州', '宿州', '阜阳', '六安', '蚌埠', '合肥', '芜湖', '安庆', '黄山'],
        '澳门': ['澳门'],
        '重庆': ['奉节', '重庆', '涪陵'],
        '福建': ['莆田', '浦城', '南平', '宁德', '福州', '龙岩', '三明', '泉州', '漳州', '厦门'],
        '甘肃': ['张掖', '金昌', '武威', '兰州', '白银', '定西', '平凉', '庆阳', '甘南', '临夏', '天水', '嘉峪关', '酒泉', '陇南'],
        '广东': ['南雄', '韶关', '清远', '梅州', '肇庆', '广州', '河源', '汕头', '深圳', '汕尾', '湛江', '阳江', '茂名', '佛冈', '梅县', '电白', '高要', '珠海', '佛山', '江门', '惠州', '东莞', '中山', '潮州', '揭阳', '云浮'],
        '广西': ['桂林', '河池', '柳州', '百色', '贵港', '梧州', '南宁', '钦州', '北海', '防城港', '玉林', '贺州', '来宾', '崇左'],
        '贵州': ['毕节', '遵义', '铜仁', '安顺', '贵阳', '黔西南布依族苗族自治州', '六盘水'],
        '海南': ['海口', '三亚', '屯昌', '琼海', '儋州', '文昌', '万宁', '东方', '澄迈', '定安', '临高', '白沙黎族自治县', '乐东黎族自治县', '陵水黎族自治县', '保亭黎族苗族自治县', '琼中黎族苗族自治县'],
        '河北': ['邯郸', '衡水', '石家庄', '邢台', '张家口', '承德', '秦皇岛', '廊坊', '唐山', '保定', '沧州'],
        '河南': ['安阳', '三门峡', '郑州', '南阳', '周口', '驻马店', '信阳', '开封', '洛阳', '平顶山', '焦作', '鹤壁', '新乡', '濮阳', '许昌', '漯河', '商丘', '济源'],
        '湖北': ['襄樊', '荆门', '黄冈', '恩施土家族苗族自治州', '武汉', '麻城', '黄石', '鄂州', '孝感', '咸宁', '随州', '仙桃', '天门', '潜江', '神农架', '枣阳'],
        '湖南': ['张家界', '岳阳', '怀化', '长沙', '邵阳', '益阳', '郴州', '桑植', '沅陵', '南岳', '株洲', '湘潭', '衡阳', '娄底', '常德'],
        '吉林': ['辽源', '通化', '白城', '松原', '长春', '吉林市', '桦甸', '延边朝鲜族自治州', '集安', '白山', '四平'],
        '江苏': ['无锡', '苏州', '盱眙', '赣榆', '东台', '高邮', '镇江', '泰州', '宿迁', '徐州', '连云港', '淮安', '南京', '扬州', '盐城', '南通', '常州'],
        '江西': ['庐山', '玉山', '贵溪', '广昌', '萍乡', '新余', '宜春', '赣州', '九江', '景德镇', '南昌', '鹰潭', '上饶', '抚州'],
        '辽宁': ['葫芦岛', '盘锦', '辽阳', '铁岭', '阜新', '朝阳', '锦州', '鞍山', '沈阳', '本溪', '抚顺', '营口', '丹东', '瓦房店', '大连'],
        '内蒙古': ['呼伦贝尔', '兴安盟', '锡林郭勒盟', '巴彦淖尔盟', '包头', '呼和浩特', '锡林浩特', '通辽', '赤峰', '乌海', '鄂尔多斯', '乌兰察布盟'],
        '宁夏': ['石嘴山', '银川', '吴忠', '固原'],
        '青海': ['海北藏族自治州', '海南藏族自治州', '西宁', '玉树藏族自治州', '黄南藏族自治州', '果洛藏族自治州', '海西蒙古族藏族自治州', '海东'],
        '山东': ['德州', '滨州', '烟台', '聊城', '济南', '泰安', '淄博', '潍坊', '青岛', '济宁', '日照', '泰山', '枣庄', '东营', '威海', '莱芜', '临沂', '菏泽'],
        '山西': ['长治', '晋中', '朔州', '大同', '吕梁', '忻州', '太原', '阳泉', '临汾', '运城', '晋城', '五台山'],
        '陕西': ['榆林', '延安', '西安', '渭南', '汉中', '商洛', '安康', '铜川', '宝鸡', '咸阳'],
        '四川': ['甘孜藏族自治州', '阿坝藏族羌族自治州', '成都', '绵阳', '雅安', '峨眉山', '乐山', '宜宾', '巴中', '达州', '遂宁', '南充', '泸州', '自贡', '攀枝花', '德阳', '广元', '内江', '广安', '眉山', '资阳', '凉山彝族自治州'],
        '台湾': ['台北'],
        '天津': ['天津', '塘沽区'],
        '西藏': ['那曲', '日喀则', '拉萨', '山南', '阿里', '昌都', '林芝'],
        '香港': ['香港'],
        '新疆': ['昌吉回族自治州', '克孜勒苏柯尔克孜自治州', '伊犁哈萨克自治州', '阿拉尔', '克拉玛依', '博尔塔拉蒙古自治州', '乌鲁木齐', '吐鲁番', '阿克苏', '石河子', '喀什', '和田', '哈密', '奇台'],
        '云南': ['昭通', '丽江', '曲靖', '保山', '大理白族自治州', '楚雄彝族自治州', '昆明', '瑞丽', '玉溪', '临沧', '思茅', '红河哈尼族彝族自治州', '文山壮族苗族自治州', '西双版纳傣族自治州', '德宏傣族景颇族自治州', '怒江傈傈族自治州', '迪庆藏族自治州'],
        '浙江': ['湖州', '嵊州', '平湖', '石浦', '宁海', '洞头', '舟山', '杭州', '嘉兴', '金华', '绍兴', '宁波', '衢州', '丽水', '台州', '温州']
      };
=======
          "img12": "2",
          "img_single": "3",
          "img_title1": "阵雨",
          "img_title2": "晴",
          "img_title3": "晴",
          "img_title4": "晴",
          "img_title5": "晴",
          "img_title6": "晴",
          "img_title7": "晴",
          "img_title8": "多云",
          "img_title9": "多云",
          "img_title10": "多云",
          "img_title11": "多云",
          "img_title12": "阴",
          "img_title_single": "阵雨",
          "wind1": "微风",
          "wind2": "北风3-4级转微风",
          "wind3": "微风",
          "wind4": "微风",
          "wind5": "微风",
          "wind6": "微风",
          "fx1": "微风",
          "fx2": "微风",
          "fl1": "小于3级",
          "fl2": "3-4级转小于3级",
          "fl3": "小于3级",
          "fl4": "小于3级",
          "fl5": "小于3级",
          "fl6": "小于3级",
          "index": "温凉",
          "index_d": "建议着夹衣或西服套装加薄羊毛衫等春秋服装。年老体弱者宜着夹衣或风衣加羊毛衫。",
          "index48": "温凉",
          "index48_d": "建议着夹衣加薄羊毛衫等春秋服装。体弱者宜着夹衣加羊毛衫。但昼夜温差较大，注意增减衣服。",
          "index_uv": "弱",
          "index48_uv": "中等",
          "index_xc": "不宜",
          "index_tr": "适宜",
          "index_co": "舒适",
          "st1": "15",
          "st2": "9",
          "st3": "22",
          "st4": "12",
          "st5": "25",
          "st6": "12",
          "index_cl": "较不宜",
          "index_ls": "不太适宜",
          "index_ag": "极易发"
        }
      };
      setInterval(this.LoadXMLDoc(cityurl), 50);
      return console.log("weathergui_init");
    };

    Weather.prototype.weathergui_receiving = function() {
      var text_receiving;

      text_receiving = "weathergui_receiving";
      return console.log(text_receiving);
    };

    Weather.prototype.weathergui_update = function() {
      return console.log("weathergui_update");
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e
    };

    return Weather;

<<<<<<< HEAD
  })();

  window.plugin = new Weather;
=======
  })(Gadget);

  window.plugin = new Weather("weather", 10, 1, 3, 1);
>>>>>>> 53a591a3c1455457090c531a742e1f94c55d094e

}).call(this);
