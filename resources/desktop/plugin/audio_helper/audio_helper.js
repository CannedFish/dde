// Generated by CoffeeScript 1.6.2
(function() {
  var AudioHelper, DEEPIN_ITEM_ID, Lines, Module, Plugin, PluginManager, Widget, ajax, apply_animation, apply_flash, apply_rotate, assert, build_menu, calc_text_size, clamp, create_element, create_img, dnd_is_deepin_item, dnd_is_desktop, dnd_is_file, echo, find_drag_target, get_function_name, get_page_xy, get_path_base, get_path_name, run_post, swap_element, _, _events,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Storage.prototype.setObject = function(key, value) {
    return this.setItem(key, JSON.stringify(value));
  };

  Storage.prototype.getObject = function(key) {
    return JSON.parse(this.getItem(key));
  };

  String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };

  Array.prototype.remove = function(el) {
    var i;

    i = this.indexOf(el);
    if (i !== -1) {
      return this.splice(this.indexOf(el), 1)[0];
    }
  };

  echo = function(log) {
    return console.log(log);
  };

  assert = function(value, msg) {
    if (!value) {
      throw new Error(msg);
    }
  };

  _ = function(s) {
    return DCore.gettext(s);
  };

  build_menu = function(info) {
    var i, m, sm, v, _i, _len;

    m = new DeepinMenu;
    for (_i = 0, _len = info.length; _i < _len; _i++) {
      v = info[_i];
      if (v.length === 0) {
        i = new DeepinMenuItem(2, 0, 0, 0);
      } else if (typeof v[0] === "number") {
        i = new DeepinMenuItem(0, v[0], v[1], null);
        if (v.length > 2 && v[2] === false) {
          i.enabled = false;
        } else {
          i.enabled = true;
        }
      } else {
        sm = build_menu(v[1]);
        i = new DeepinMenuItem(1, 0, v[0], sm);
      }
      m.appendItem(i);
    }
    return m;
  };

  get_page_xy = function(el, x, y) {
    var p;

    return p = webkitConvertPointFromNodeToPage(el, new WebKitPoint(x, y));
  };

  find_drag_target = function(el) {
    var p;

    p = el;
    if (p.draggable) {
      return p;
    }
    while (p = el.parentNode) {
      if (p.draggable) {
        return p;
      }
    }
    return null;
  };

  swap_element = function(c1, c2) {
    var tmp;

    if (c1.parentNode === c2.parentNode) {
      tmp = document.createElement('div');
      c1.parentNode.insertBefore(tmp, c1);
      c2.parentNode.insertBefore(c1, c2);
      tmp.parentNode.insertBefore(c2, tmp);
      return tmp.parentNode.removeChild(tmp);
    }
  };

  document.body.ondrop = function(e) {
    return e.preventDefault();
  };

  run_post = function(f, self) {
    var f2;

    f2 = f.bind(self || this);
    return setTimeout(f2, 0);
  };

  create_element = function(type, clss, parent) {
    var el;

    el = document.createElement(type);
    if (clss) {
      el.setAttribute("class", clss);
    }
    if (parent) {
      parent.appendChild(el);
    }
    return el;
  };

  create_img = function(clss, src, parent) {
    var el;

    el = create_element('img', clss, parent);
    el.src = src;
    el.draggable = false;
    return el;
  };

  calc_text_size = function(txt, width) {
    var h, tmp;

    tmp = create_element('div', 'hidden_calc_text', document.body);
    tmp.innerText = txt;
    tmp.style.width = "" + width + "px";
    h = tmp.clientHeight;
    document.body.removeChild(tmp);
    return h;
  };

  clamp = function(value, min, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  };

  get_function_name = function() {
    if (!arguments.caller) {
      return "AnymouseFunction";
    }
    return /function (.*?)\(/.exec(arguments.caller.toString())[1];
  };

  DEEPIN_ITEM_ID = "deepin-item-id";

  dnd_is_desktop = function(e) {
    return e.dataTransfer.getData("text/uri-list").trim().endsWith(".desktop");
  };

  dnd_is_deepin_item = function(e) {
    if (e.dataTransfer.getData(DEEPIN_ITEM_ID)) {
      return true;
    } else {
      return false;
    }
  };

  dnd_is_file = function(e) {
    return e.dataTransfer.getData("text/uri-list").length !== 0;
  };

  ajax = function(url, method, callback, asyn) {
    var xhr;

    if (asyn == null) {
      asyn = true;
    }
    xhr = new XMLHttpRequest();
    xhr.open(method, url, asyn);
    xhr.send(null);
    return xhr.onreadystatechange = function() {
      if (xhr.readyState === 4 && xhr.status === 200) {
        return typeof callback === "function" ? callback(xhr) : void 0;
      }
    };
  };

  get_path_base = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  get_path_name = function(path) {
    var dot_pos;

    dot_pos = path.lastIndexOf('.');
    if (dot_pos === -1) {
      return path.substring(path.lastIndexOf('/') + 1);
    } else {
      return path.substring(path.lastIndexOf('/') + 1, dot_pos);
    }
  };

  Module = (function() {
    var moduleKeywords;

    function Module() {}

    moduleKeywords = ['extended', 'included'];

    Module.extended = function(obj) {
      var key, value, _ref;

      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.included = function(obj, parms) {
      var key, value, _ref, _ref1;

      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return (_ref1 = obj.__init__) != null ? _ref1.call(this, parms) : void 0;
    };

    return Module;

  })();

  _events = ['blur', 'change', 'click', 'contextmenu', 'buildmenu', 'rightclick', 'copy', 'cut', 'dblclick', 'error', 'focus', 'keydown', 'keypress', 'keyup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mousewheel', 'paste', 'reset', 'resize', 'scroll', 'select', 'submit', 'DOMActivate', 'DOMAttrModified', 'DOMCharacterDataModified', 'DOMFocusIn', 'DOMFocusOut', 'DOMMouseScroll', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMSubtreeModified', 'textInput', 'dragstart', 'dragend', 'dragover', 'drag', 'drop', 'dragenter', 'dragleave', 'itemselected', 'webkitTransitionEnd'];

  Widget = (function(_super) {
    __extends(Widget, _super);

    Widget.object_table = {};

    Widget.look_up = function(id) {
      return this.object_table[id];
    };

    function Widget() {
      var el, f_menu, f_rclick, k, key, v, _ref,
        _this = this;

      el = document.createElement('div');
      el.setAttribute('class', this.constructor.name);
      el.id = this.id;
      this.element = el;
      Widget.object_table[this.id] = this;
      f_menu = null;
      f_rclick = null;
      _ref = this.constructor.prototype;
      for (k in _ref) {
        v = _ref[k];
        if (!(k.search("do_") === 0)) {
          continue;
        }
        key = k.substr(3);
        if (__indexOf.call(_events, key) >= 0) {
          if (key === "rightclick") {
            f_rclick = v.bind(this);
          } else if (key === "buildmenu") {
            f_menu = v.bind(this);
          } else if (key === "contextmenu") {
            "nothing should do";
          } else {
            this.element.addEventListener(key, v.bind(this));
          }
        } else {
          echo("found the do_ prefix but the name " + key + " is not an dom events");
        }
      }
      this.element.addEventListener("contextmenu", function(e) {
        if (f_rclick) {
          f_rclick(e);
        }
        if (f_menu) {
          _this.element.contextMenu = build_menu(f_menu());
          return e.stopPropagation();
        }
      });
    }

    Widget.prototype.destroy = function() {
      var _ref;

      if ((_ref = this.element.parentElement) != null) {
        _ref.removeChild(this.element);
      }
      return delete Widget.object_table[this.id];
    };

    Widget.prototype.add_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.add(name);
    };

    Widget.prototype.remove_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.remove(name);
    };

    return Widget;

  })(Module);

  PluginManager = (function() {
    function PluginManager() {}

    PluginManager.prototype.enable_plugin = function(id, value) {};

    return PluginManager;

  })();

  Plugin = (function() {
    function Plugin(path, name, host) {
      this.path = path;
      this.name = name;
      this.host = host;
      window._plugin = this;
      this.inject_js(this.name);
      this.id = "plugin:" + this.path + this.name;
    }

    Plugin.prototype.wrap_element = function(child) {
      return this.host.appendChild(child);
    };

    Plugin.prototype.inject_js = function(name) {
      this.js_element = create_element("script", null, this.host);
      return this.js_element.src = "" + this.path + "/" + name + ".js";
    };

    Plugin.prototype.inject_css = function(name) {
      this.css_element = create_element('link', null, this.host);
      this.css_element.rel = "stylesheet";
      return this.css_element.href = "" + this.path + "/" + name + ".css";
    };

    return Plugin;

  })();

  apply_animation = function(el, name, duration, timefunc) {
    el.style.webkitAnimationName = name;
    el.style.webkitAnimationDuration = duration;
    return el.style.webkitAnimationTimingFunction = timefunc || "linear";
  };

  apply_rotate = function(el, time) {
    var id;

    apply_animation(el, "rotate", "" + time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  apply_flash = function(el, time) {
    var id;

    apply_animation(el, "flash", "" + time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  Lines = (function(_super) {
    __extends(Lines, _super);

    function Lines(id) {
      var BIG_WIDTH, HUGE_WIDTH, MID_WIDTH, MIN_WIDTH;

      this.id = id;
      Lines.__super__.constructor.apply(this, arguments);
      MIN_WIDTH = 14;
      MID_WIDTH = 16;
      BIG_WIDTH = 18;
      HUGE_WIDTH = 20;
      this.lines = [];
      this.lines.push(this.create_line(MIN_WIDTH));
      this.lines.push(this.create_line(MID_WIDTH));
      this.lines.push(this.create_line(MIN_WIDTH));
      this.lines.push(this.create_line(BIG_WIDTH));
      this.lines.push(this.create_line(MIN_WIDTH));
      this.lines.push(this.create_line(HUGE_WIDTH));
      this.lines.push(this.create_line(BIG_WIDTH));
      this.lines.push(this.create_line(MIN_WIDTH));
    }

    Lines.prototype.create_line = function(width) {
      var line;

      line = create_element("div", "line", this.element);
      line.style.width = width;
      return line;
    };

    Lines.prototype.active_line = function() {
      var i, line, _i, _len, _ref, _results;

      _ref = this.lines;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        line = _ref[i];
        _results.push(line.style.webkitAnimation = "blink " + (i + 1 / 2.0) + "s linear infinite");
      }
      return _results;
    };

    return Lines;

  })(Widget);

  AudioHelper = (function(_super) {
    __extends(AudioHelper, _super);

    function AudioHelper(id) {
      this.id = id;
      AudioHelper.__super__.constructor.apply(this, arguments);
      this.img = create_img("running", "" + _plugin.path + "/running.png", this.element);
      this.element.style.background = "url(" + _plugin.path + "/static.png)";
      this.lines = new Lines();
      this.element.appendChild(this.lines.element);
      this.active_id = -1;
    }

    AudioHelper.prototype.do_click = function(e) {
      return this.lines.active_line();
    };

    return AudioHelper;

  })(Widget);

  _plugin.inject_css("audio_helper");

  _plugin.wrap_element(new AudioHelper(_plugin.id).element);

}).call(this);
